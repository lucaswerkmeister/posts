<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Lucas‚Äô Posts (#wikimedia)</title><link>https://lucaswerkmeister.de/posts/</link><description>I suppose this is a blog of sorts ‚Äì or at least a place where I occasionally post stuff. Not necessarily about anything in particular.</description><lastBuildDate>Fri, 31 Oct 2025 17:23:00 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Wikimedia Netherlands Mini Hackathon 2025 recap</title><link>https://lucaswerkmeister.de/posts/2025/10/30/wmnl-mini-hackathon-2025/</link><description>&lt;article&gt;

&lt;p&gt;
        Last weekend, I participated in the &lt;a href="https://nl.wikimedia.org/wiki/Mini_Hackathon_October_2025"&gt;Wikimedia Netherlands Mini Hackathon 2025&lt;/a&gt;
        (&lt;a href="https://commons.wikimedia.org/wiki/Category:2025_Wikimedia_Netherlands_Mini_Hackathon"&gt;Commons category&lt;/a&gt;),
        a one-day event for ca. 25 people at the Wikimedia Netherlands office in Utrecht.
        This was the fourth time it took place, and also the fourth time I attended;
        it‚Äôs a really nice little event, and also a good opportunity for me to visit some folks along the way.
        This time, I thought I‚Äôd write a little bit about what I did there.
      &lt;/p&gt;
&lt;p&gt;
        My first major project was moving the documentation for m3api from GitHub pages to doc.wikimedia.org (&lt;a href="https://phabricator.wikimedia.org/T392716"&gt;T392716&lt;/a&gt;).
        As you may recall, earlier this year I &lt;a href="https://lucaswerkmeister.de/posts/2025/04/12/introducing-m3api/"&gt;released m3api&lt;/a&gt;,
        a library for using the MediaWiki Action API.
        more recently, I moved its code hosting from GitHub to Wikimedia GitLab (&lt;a href="https://phabricator.wikimedia.org/T392290"&gt;T392290&lt;/a&gt;),
        but wasn‚Äôt able to move the documentation away from GitHub Pages at the time.
        At the hackathon, I managed to &lt;a href="https://gitlab.wikimedia.org/repos/m3api/ci-templates/-/commit/3b13ff6501"&gt;put together a build process&lt;/a&gt;,
        and get approval from someone with the right access,
        to publish documentation for &lt;a href="https://gitlab.wikimedia.org/repos/releng/docpub/-/merge_requests/33"&gt;a temporary test package&lt;/a&gt;
        and &lt;a href="https://gitlab.wikimedia.org/repos/releng/docpub/-/merge_requests/34"&gt;the real m3api packages&lt;/a&gt;
        to publish their documentation to &lt;a href="https://doc.wikimedia.org/"&gt;doc.wikimedia.org&lt;/a&gt;.
        The process worked for the test package (&lt;a href="https://web.archive.org/web/20251025142728/https://doc.wikimedia.org/m3api/tmp-m3api-example/"&gt;archived snapshot&lt;/a&gt;);
        I‚Äôll finish the process for the real m3api packages later (hopefully soon).
        Many thanks to Reedy for advice and Bryan for merging those requests!
      &lt;/p&gt;
&lt;p&gt;
        My other major project was part of something I‚Äôve been tinkering with, on and off, for several years now (and in a grey zone between my staff and volunteer accounts, meh):
        making language names translatable on translatewiki.net (&lt;a href="https://phabricator.wikimedia.org/T231755"&gt;T231755&lt;/a&gt;).
        The &lt;a href="https://www.mediawiki.org/wiki/Extension:CLDR"&gt;CLDR extension&lt;/a&gt; contains a lot of names of languages in other languages
        (e.g. the German name for Arabic is &lt;q lang="de"&gt;Arabisch&lt;/q&gt;, the Arabic name for Japanese is &lt;q dir="rtl" lang="ar"&gt;ÿßŸÑŸäÿßÿ®ÿßŸÜŸäÿ©&lt;/q&gt;,
        the Japanese name for Tarantino is &lt;q lang="ja"&gt;„Çø„É©„É≥„ÉàË™û&lt;/q&gt;, etc.).
        Some of these names come from the &lt;a href="https://en.wikipedia.org/wiki/Common_Locale_Data_Repository"&gt;CLDR database&lt;/a&gt;,
        while others are defined within this extension (called local names);
        reasons for local names might included that MediaWiki is using a nonstandard language code
        (as with Tarantino, &lt;code&gt;roa-tara&lt;/code&gt;, above ‚Äì it has no standard language code),
        or that the process to contribute language name translations to CLDR is slow and cumbersome
        (so even if a language name will be added to CLDR eventually, we may want to include it as a local name temporarily).
        However, the process to manage these local names is also cumbersome:
        they‚Äôre defined in PHP files in the extension,
        and to add or update them, you either need a &lt;a href="https://www.mediawiki.org/wiki/Developer_account"&gt;developer account&lt;/a&gt; to upload a change to the Gerrit code review system,
        or ask someone else who has a developer account (typically a translatewiki.net volunteer, I gather) to port your changes to Gerrit for review.
        Instead, we would like to make these names translatable on &lt;a href="https://translatewiki.net/"&gt;translatewiki.net&lt;/a&gt;,
        just like other messages can be translated there.
        A necessary requirement for this is that we have English versions of all local names, which was not previously true ‚Äì
        several local names only existed in other languages, such as Norwegian (&lt;code&gt;no&lt;/code&gt;).
        So during the hackathon I went through the list of language codes that were lacking an English name,
        and added one for all of them.
        The &lt;a href="https://gerrit.wikimedia.org/r/c/mediawiki/extensions/cldr/+/1054902"&gt;resulting Gerrit change&lt;/a&gt; isn‚Äôt ready for merging yet,
        but it hopefully will be soon.
        Many thanks to Nikki for advice on these languages and their names!
      &lt;/p&gt;
&lt;p&gt;
        Besides those two projects, I also assisted some other people with their own projects,
        including some OpenRefine work which was a nice opportunity for me to get a bit more acquainted with it again
        (and &lt;a href="https://wikis.world/@LucasWerkmeister/115435031813365329"&gt;learn some new things about it&lt;/a&gt; too!).
        And of course, as is tradition at Wikimedia Hackathon events,
        copious amounts of sweets were exchanged and consumed :)
        I look forward to my next hackathon in the Netherlands,
        whether it‚Äôs next year‚Äôs edition of the mini hackathon
        or the &lt;a href="https://www.mediawiki.org/wiki/Wikimedia_Northwestern_European_Hackathon_2026"&gt;Wikimedia Northwestern European Hackathon 2026&lt;/a&gt; üéâ
      &lt;/p&gt;

&lt;style&gt;
        :lang(ar) {
            quotes: "¬´" "¬ª";
        }
        :lang(de) {
            quotes: "‚Äû" "‚Äú";
        }
        :lang(ja) {
            quotes: "„Äå" "„Äç";
        }
      &lt;/style&gt;
&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2025/10/30/wmnl-mini-hackathon-2025/</guid><pubDate>Thu, 30 Oct 2025 00:00:00 GMT</pubDate></item><item><title>Falsehoods Wikimedians Believe About Gadgets</title><link>https://lucaswerkmeister.de/posts/2025/08/12/falsehoods-wikimedians-believe-about-gadgets/</link><description>&lt;article&gt;

&lt;p&gt;
&lt;a href="https://www.mediawiki.org/wiki/Extension:Gadgets"&gt;Gadgets&lt;/a&gt; are a popular way to improve the user experience on MediaWiki wikis,
        including &lt;a href="https://meta.wikimedia.org/wiki/Gadgets"&gt;Wikimedia wikis&lt;/a&gt;.
        This humorous list contains misconceptions that some of us, consciously or unconsciously,
        may hold about various aspects of gadgets,
        based on my own experience as an interface administrator on Wikimedia Commons.
      &lt;/p&gt;
&lt;p&gt;
        For some of the falsehoods, I‚Äôve included some extra text that you can read if you like
        (click the headings to collapse/expand them&lt;script src="orExpandCollapseAll.js"&gt;&lt;/script&gt;).
        But I‚Äôd suggest first reading through the whole list once,
        as I think the text flows better this way :)
      &lt;/p&gt;
&lt;p&gt;
        (With thanks to Ash_Crow, Sukkoria and Brooke Vibber for proofreading and suggestions!)
      &lt;/p&gt;
&lt;h2&gt;The list&lt;/h2&gt;
&lt;h3 id="1"&gt;1. The user who created this gadget is its maintainer&lt;/h3&gt;
&lt;h3 id="2"&gt;2. The user who most often edited this gadget is its maintainer&lt;/h3&gt;
&lt;h3 id="3"&gt;3. The user who last edited this gadget is its maintainer&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="4"&gt;4. This gadget‚Äôs maintainer uses it regularly&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;I maintain &lt;a href="https://commons.wikimedia.org/wiki/Help:Gadget-ACDC"&gt;AC/DC&lt;/a&gt;, but use it &lt;a href="https://commons.wikimedia.org/w/index.php?title=Special:Contributions/Lucas_Werkmeister&amp;amp;tagfilter=ACDC&amp;amp;limit=500"&gt;only sporadically&lt;/a&gt;.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="5"&gt;5. This gadget‚Äôs maintainer is able to edit its code&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          If a gadget started out as a user script, the author of the user script may not have the permissions required to edit it after the conversion to a gadget.
          For example, this was the case for AC/DC, until I &lt;a href="https://commons.wikimedia.org/wiki/Commons:Administrators/Requests/Lucas_Werkmeister_(interface_administrator)"&gt;became an interface administrator&lt;/a&gt;.
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="6"&gt;6. Gadgets should only have one maintainer&lt;/h3&gt;
&lt;h3 id="7"&gt;7. This gadget has enough maintainers&lt;/h3&gt;
&lt;h3 id="8"&gt;8. This gadget is maintained&lt;/h3&gt;
&lt;h3 id="9"&gt;9. This gadget works&lt;/h3&gt;
&lt;h3 id="10"&gt;10. If this gadget was broken, somebody would have noticed it&lt;/h3&gt;
&lt;h3 id="11"&gt;11. This gadget has users&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="12"&gt;12. This gadget has active users&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          Special:GadgetUsage
          (e.g. &lt;a href="https://en.wikipedia.org/wiki/Special:GadgetUsage"&gt;English Wikipedia&lt;/a&gt;,
          &lt;a href="https://commons.wikimedia.org/wiki/Special:GadgetUsage"&gt;Wikimedia Commons&lt;/a&gt;,
          &lt;a href="https://www.wikidata.org/wiki/Special:GadgetUsage"&gt;Wikidata&lt;/a&gt;)
          shows the number of users and active users (ones who‚Äôve made an edit in the past 30 days) who have a gadget enabled
          (which doesn‚Äôt necessarily mean they‚Äôre actively using the gadget).
          Some gadgets can have thousands of users;
          others, even on large wikis, may only have a handful, and it‚Äôs possible that few of those users are still active.
          On test wikis you can easily find gadgets with no active users at all
          (though I‚Äôve yet to find a gadget without even inactive users).
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="13"&gt;13. This gadget is used more widely than this similar user script&lt;/h3&gt;
&lt;h3 id="14"&gt;14. This gadget has no bugs&lt;/h3&gt;
&lt;h3 id="15"&gt;15. This gadget has no security vulnerabilities&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="16"&gt;16.Surely no gadget on Wikimedia wikis uses &lt;code&gt;eval()&lt;/code&gt;&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          Don‚Äôt look at &lt;a href="https://global-search.toolforge.org/?q=eval&amp;amp;namespaces=8&amp;amp;title=Gadget-.*%5C.js"&gt;this global search&lt;/a&gt; if you want to keep believing that.
        &lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="17"&gt;17. This MediaWiki:Gadget-* page is part of a gadget&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          It‚Äôs worth checking the &lt;a href="https://www.mediawiki.org/wiki/Extension:Gadgets#Definition_format"&gt;gadgets definition page&lt;/a&gt;;
          maybe the page author never finished the gadget,
          or it became obsolete and was removed from the gadget definitions again
          (&lt;a href="https://commons.wikimedia.org/wiki/Commons:Deletion_requests/MediaWiki:Gadget-site-HideFilterBar.js"&gt;example&lt;/a&gt;).
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="18"&gt;18. This gadget uses a consistent coding style&lt;/h3&gt;
&lt;h3 id="19"&gt;19. This gadget‚Äôs code is written this way for a good reason, it shouldn‚Äôt be changed&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="20"&gt;20. This gadget‚Äôs code is written this way for no reason, it‚Äôs fine to change it&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          Both of these refer to &lt;a href="https://en.wikipedia.org/wiki/Chesterton's_fence"&gt;Chesterton‚Äôs fence&lt;/a&gt;,
          the idea that you shouldn‚Äôt change an existing system without understanding the reason for its current state.
          If you‚Äôre looking at an unfamiliar gadget and something in the code seems pointless and confusing,
          it‚Äôs a good idea to look into why it was written like that before changing it.
          Once you understand it, it may still be legitimate to change the code,
          e.g. if the code is working around quirks in an ancient browser version that‚Äôs no longer supported,
          or if the original developer just liked the code this way and didn‚Äôt realize that it would cause some specific bug.
          If you can‚Äôt figure out the reason,
          you‚Äôll have to apply your own judgment whether you still want to risk changing the gadget.
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="21"&gt;21. Edits suggested or made by this gadget, by necessity, represent currently accepted best practices on this wiki&lt;/h3&gt;
&lt;h3 id="22"&gt;22. If this gadget was discouraged, deprecated, unmaintained, or abandoned in some way, the gadget description and/or documentation would say so&lt;/h3&gt;
&lt;h3 id="23"&gt;23. This gadget‚Äôs code is only used on this wiki&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="24"&gt;24. This gadget‚Äôs code is only used on Wikimedia wikis&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          For example, HotCat can be (and is) &lt;a href="https://commons.wikimedia.org/wiki/Help:Gadget-HotCat#Installing_HotCat_on_another_wiki"&gt;installed on many other wikis&lt;/a&gt;.
          Many of them are set up to always load the latest code straight from Wikimedia Commons,
          so we need to be extra careful when making any changes there.
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="25"&gt;25. This gadget is usable&lt;/h3&gt;
&lt;h3 id="26"&gt;26. This gadget‚Äôs user interface is well designed&lt;/h3&gt;
&lt;h3 id="27"&gt;27. This gadget is self-explanatory&lt;/h3&gt;
&lt;h3 id="28"&gt;28. This gadget has a documentation page&lt;/h3&gt;
&lt;h3 id="29"&gt;29. This gadget‚Äôs documentation page is up to date&lt;/h3&gt;
&lt;h3 id="30"&gt;30. This gadget‚Äôs documentation page is correct&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="31"&gt;31. Every part of this gadget is protected against vandalism&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          Translations may be less protected than the gadget‚Äôs code proper, for instance.
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="32"&gt;32. Any user who edited this gadget, by necessity, understood how the whole gadget worked then and still understands it now&lt;/h3&gt;
&lt;h3 id="33"&gt;33. If an issue with this gadget is reported on its talk page, somebody will respond to it&lt;/h3&gt;
&lt;h3 id="34"&gt;34. If an issue with this gadget is reported on its talk page, nobody will respond to it&lt;/h3&gt;
&lt;h3 id="35"&gt;35. An edit request to update this gadget will be processed speedily&lt;/h3&gt;
&lt;h3 id="36"&gt;36. An edit request to update this gadget will never be processed&lt;/h3&gt;
&lt;h3 id="37"&gt;37. This wiki has an edit request template&lt;/h3&gt;
&lt;details&gt;
&lt;summary&gt;
&lt;h3 id="38"&gt;38. This wiki has a technical village pump or interface administrators‚Äô noticeboard&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          From Wikimedia Commons, I‚Äôm mostly familiar with the &lt;a href="https://commons.wikimedia.org/wiki/Template:Edit_request"&gt;edit request&lt;/a&gt; workflow
          (a template you put on the talk page of the page you want edited),
          but e.g. German Wikipedia has no such template and instead collects all edit requests on a &lt;a href="https://de.wikipedia.org/wiki/Wikipedia:Technik/Skin/MediaWiki/%C3%84nderungen"&gt;central noticeboard&lt;/a&gt;.
          Other wikis may have neither
          (&lt;a href="https://query.wikidata.org/embed.html#SELECT%20%3Fwiki%20WHERE%20%7B%0A%20%20hint%3AQuery%20hint%3Aoptimizer%20%22None%22.%0A%20%20%3Fwiki%20wikibase%3AwikiGroup%20%22wikipedia%22.%0A%20%20MINUS%20%7B%0A%20%20%20%20%3FtemplateEditFullyProtected%20schema%3Aabout%20wd%3AQ6578653%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20schema%3AisPartOf%20%3Fwiki.%0A%20%20%7D%0A%20%20MINUS%20%7B%0A%20%20%20%20%3FtemplateEditProtected%20schema%3Aabout%20wd%3AQ131313714%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20schema%3AisPartOf%20%3Fwiki.%0A%20%20%7D%0A%20%20MINUS%20%7B%0A%20%20%20%20%3FinterfaceAdminNoticeboard%20schema%3Aabout%20wd%3AQ14720036%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20schema%3AisPartOf%20%3Fwiki.%0A%20%20%7D%0A%20%20MINUS%20%7B%0A%20%20%20%20%3FtechnicalVillagePump%20schema%3Aabout%20wd%3AQ4582194%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20schema%3AisPartOf%20%3Fwiki.%0A%20%20%7D%0A%7D"&gt;Wikidata query&lt;/a&gt;).
        &lt;/p&gt;
&lt;/details&gt;
&lt;h3 id="39"&gt;39. This gadget‚Äôs messages are translatable&lt;/h3&gt;
&lt;h3 id="40"&gt;40. Everyone can update this gadget‚Äôs translations&lt;/h3&gt;
&lt;h3 id="41"&gt;41. Everyone knows how to update this gadget‚Äôs translations&lt;/h3&gt;
&lt;h3 id="42"&gt;42. Someone knows how to update this gadget‚Äôs translations&lt;/h3&gt;
&lt;h3 id="43"&gt;43. This gadget‚Äôs source code and comments are written in English&lt;/h3&gt;
&lt;h3 id="44"&gt;44. This gadget‚Äôs source code is commented&lt;/h3&gt;
&lt;h3 id="45"&gt;45. This user script should be a gadget&lt;/h3&gt;
&lt;h3 id="46"&gt;46. This user script shouldn‚Äôt be a gadget&lt;/h3&gt;
&lt;h3 id="47"&gt;47. This user script could‚Äôve been made a gadget already&lt;/h3&gt;
&lt;h3 id="48"&gt;48. There‚Äôs a good reason why this user script wasn‚Äôt already made a gadget&lt;/h3&gt;
&lt;h3 id="49"&gt;49. When it‚Äôs agreed that this user script should be made a gadget, it‚Äôs clear which user‚Äôs version of the user script should be adopted&lt;/h3&gt;
&lt;h3 id="50"&gt;50. This useful functionality already exists as a gadget&lt;/h3&gt;
&lt;h3 id="51"&gt;51. There must be a reason why there‚Äôs no gadget for this useful functionality yet&lt;/h3&gt;
&lt;h3 id="52"&gt;52. This gadget would be really easy to create&lt;/h3&gt;
&lt;details open=""&gt;
&lt;summary&gt;
&lt;h3 id="53"&gt;53. This gadget would be really hard to create&lt;/h3&gt;
&lt;/summary&gt;
&lt;p&gt;
          You won‚Äôt know until you try it.
          If you know how to write JavaScript,
          and you want a certain gadget or user script to exist,
          go ahead and try it out :)
        &lt;/p&gt;
&lt;/details&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2025/08/12/falsehoods-wikimedians-believe-about-gadgets/</guid><pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate></item><item><title>Migrating my tools to the Toolforge Build Service</title><link>https://lucaswerkmeister.de/posts/2025/07/29/migrating-tools-to-buildservice/</link><description>&lt;article&gt;

&lt;p&gt;
        Over the past few weeks, I migrated almost all of my &lt;a href="https://meta.wikimedia.org/wiki/User:Lucas_Werkmeister#Tools"&gt;tools&lt;/a&gt;
        to the &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Building_container_images"&gt;Toolforge Build Service&lt;/a&gt;,
        and I thought it would be useful to write a bit about the process and my motivation for doing it.
      &lt;/p&gt;
&lt;h2&gt;Why I did it&lt;/h2&gt;
&lt;p&gt;
        Recently, the Wikimedia Cloud Services team announced the
        &lt;a href="https://lists.wikimedia.org/hyperkitty/list/cloud-announce@lists.wikimedia.org/thread/5D7NK7Z7KMWQPWQC23453YB7FV555Q5R/"&gt;Toolforge push-to-deploy beta&lt;/a&gt;,
        which makes it possible to set up integration with a code forge such as Wikimedia Gitlab
        that will cause newly pushed versions of a tool‚Äôs code to be deployed to Toolforge automatically.
        This has the potential to significantly simplify the development of tools:
        instead of having to log into a Toolforge bastion server and deploy every update to the tool manually,
        one can just run &lt;code&gt;git push&lt;/code&gt; and everything else happens automatically.
      &lt;/p&gt;
&lt;p&gt;
        Currently, the beta has some limitations:
        most importantly, web services are not supported yet,
        which means the feature is actually useless to me in its current state because all of my tools are web services.
        (It should already useful for bots, though it‚Äôs not clear to me if any bots already use it in practice;
        at least I couldn‚Äôt find any relevant-looking push-to-deploy config on &lt;a href="https://codesearch.wmcloud.org/"&gt;MediaWiki Codesearch&lt;/a&gt;.)
        However, I‚Äôm hopeful that support for web service will be added soon.
        In the meantime, because it already seems clear that this support will only include tools based on the build service
        (but not tools using the various other web service types supported by Toolforge),
        now seems like a good time to migrate my tools to the build service,
        so that I‚Äôll have less work to do to set up push-to-deploy once it becomes available.
      &lt;/p&gt;
&lt;h2&gt;What I did&lt;/h2&gt;
&lt;p&gt;
        I also used this as an opportunity to adopt some best practices in my tools in general,
        even if not all of them were related to the build service migration.
        I‚Äôll go through them here in roughly the order in which I did them in most tools.
      &lt;/p&gt;
&lt;h3&gt;Add health check&lt;/h3&gt;
&lt;p&gt;
        A &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Web#Health_checks"&gt;health check&lt;/a&gt;
        is a way for the Toolforge infrastructure to detect if a tool is running (‚Äúhealthy‚Äù) or not.
        This is useful, for instance, to enable restarts of a tool (including deploying new versions) with no downtime:
        the infrastructure (Kubernetes) will bring up a container with the new version of the tool,
        wait for it to become ready according to the health check,
        switch traffic from the old container to the new one,
        and only then tear down the old container.
      &lt;/p&gt;
&lt;p&gt;
        Since 2024, Toolforge installs a TCP health check by default:
        the tool is considered healthy if it accepts connections on the web service port.
        However, this doesn‚Äôt guarantee that the server is actually ready to handle requests;
        we can do better by defining a &lt;code&gt;health-check-path&lt;/code&gt; in the
        &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Web#Webservice_templates"&gt;&lt;code&gt;service.template&lt;/code&gt; file&lt;/a&gt;,
        at which point Toolforge will instead use an HTTP health check and test if the tool successfully responds to HTTP requests to this path.
        It‚Äôs apparently conventional to call this path &lt;code&gt;/healthz&lt;/code&gt;
        (though last I looked, nobody seemed to know what the ‚Äúz‚Äù stands for),
        and as it doesn‚Äôt need to return anything special,
        the Python code for this endpoint looks very simple:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="entity name function decorator"&gt;@app.route&lt;/span&gt;(&lt;span class="string"&gt;'/healthz'&lt;/span&gt;)
&lt;span class="storage function"&gt;def&lt;/span&gt; &lt;span class="entity name function"&gt;health&lt;/span&gt;():
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;''&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        (Plus a &lt;a href="https://github.com/pallets/flask/blob/3.1.1/src/flask/typing.py#L37"&gt;return type&lt;/a&gt;,
        import-aliased to &lt;abbr title="ResponseReturnValue"&gt;RRV&lt;/abbr&gt;,
        in those tools where I use mypy.)
        And it‚Äôs configured in the &lt;code&gt;service.template&lt;/code&gt; file like this:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;health-check-path: /healthz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        I usually did this improvement first (unless I forgot or it was already set up)
        because it meant that most of the following improvements could be deployed without downtime for users.
      &lt;/p&gt;
&lt;h3&gt;Splitting prod and dev dependencies&lt;/h3&gt;
&lt;p&gt;
        In most of my tools, I previously had only one &lt;code&gt;requirements.txt&lt;/code&gt; file
        (compiled using &lt;a href="https://pip-tools.readthedocs.io/en/latest/"&gt;pip-tools&lt;/a&gt; from &lt;code&gt;requirements.in&lt;/code&gt;).
        This means that the tool‚Äôs installation on Toolforge included
        not just the packages required to run the tool (Flask, Werkzeug, mwapi, etc.)
        but also the packages required to test it (Flake8, mypy, pytest, etc.).
        This is wasteful (mypy is big!),
        and a build service based tool would install its dependencies more often than before
        (each time a new image is built, i.e. during every deployment),
        so I took an improvement I‚Äôd already done years ago in the Wikidata Lexeme Forms tool
        and followed through with it in my other tools:
        split the testing packages into a separate file
        (&lt;code&gt;dev-requirements.txt&lt;/code&gt;, compiled from &lt;code&gt;dev-requirements.in&lt;/code&gt;).
        The dev packages are installed locally (&lt;code&gt;pip-sync *requirements.txt&lt;/code&gt;)
        and in CI (&lt;code&gt;pip install -r requirements.txt -r dev-requirements.txt&lt;/code&gt;),
        but not on Toolforge.
        In most tools, this shrunk the installed venv roughly by 50%, which is pretty neat!
      &lt;/p&gt;
&lt;p&gt;
        I also added a CI job that verifies that I didn‚Äôt accidentally put a prod dependency into the dev requirements,
        by only installing the prod requirements and checking that &lt;code&gt;python app.py&lt;/code&gt; runs through without crashing on a missing import.
        This isn‚Äôt perfect,
        but since I know that I‚Äôm not doing any advanced lazy-import stuff in my own code,
        it‚Äôs good enough for me.
        (I guess an alternative would be to reuse the health check for this.)
      &lt;/p&gt;
&lt;h3&gt;Configuration from environment variables&lt;/h3&gt;
&lt;p&gt;
        All of my Flask tool read the &lt;a href="https://flask.palletsprojects.com/en/stable/config/"&gt;Flask configuration&lt;/a&gt;
        from a (user-only-readable) &lt;code&gt;config.yaml&lt;/code&gt; file in the source code directory;
        this contains, at a minimum, the &lt;a href="https://flask.palletsprojects.com/en/stable/quickstart/#sessions"&gt;secret key&lt;/a&gt; used to sign the session,
        and sometimes more information, such as the OAuth consumer key and secret.
        This is still possible on the build service (by specifying the &lt;code&gt;mount: all&lt;/code&gt; option),
        but it means the tool will rely on NFS, which is generally undesirable.
        A more forward-looking option is to store the config in &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Envvars"&gt;environment variables&lt;/a&gt;,
        which Toolforge added support for two years ago.
      &lt;/p&gt;
&lt;p&gt;
        It turns out that Flask has a method, &lt;a href="https://flask.palletsprojects.com/en/stable/api/#flask.Config.from_prefixed_env"&gt;&lt;code&gt;app.config.from_prefixed_env()&lt;/code&gt;&lt;/a&gt;,
        which will automatically load all environment variables whose name starts with a certain prefix (I use &lt;code&gt;TOOL_&lt;/code&gt;) into the config.
        It even has support for nested objects (using double underscores in the name),
        so that configuration like &lt;code&gt;app.config['OAUTH']['consumer_key']&lt;/code&gt;
        can be represented as the environment variable named &lt;code&gt;TOOL_OAUTH__consumer_key&lt;/code&gt;.
      &lt;/p&gt;
&lt;p&gt;
        However, there‚Äôs one problem with this:
        Toolforge &lt;a href="https://phabricator.wikimedia.org/T374780"&gt;requires environment variables to have all-uppercase names&lt;/a&gt;,
        but my existing code was expecting lowercase names inside the &lt;code&gt;OAUTH&lt;/code&gt; config dict.
        I worked around this by first converting the configuration keys to all-uppercase
        (initially, still inside the &lt;code&gt;config.yaml&lt;/code&gt; file);
        then, I moved the configuration to envvars,
        and finally commented out the contents of the &lt;code&gt;config.yaml&lt;/code&gt; file
        (&lt;a href="https://sal.toolforge.org/tools.speedpatrolling?d=2025-07-16"&gt;example &lt;abbr title="Server Admin Log"&gt;SAL&lt;/abbr&gt;&lt;/a&gt;).
        All of this was possible while the tools were still running on the legacy web service types.
        (The code reading the &lt;code&gt;config.yaml&lt;/code&gt; file is still there, by the way ‚Äì
        it‚Äôs much more convenient for local development, even if it‚Äôs not used on Toolforge anymore.)
      &lt;/p&gt;
&lt;h3&gt;Move CI from GitHub to GitLab&lt;/h3&gt;
&lt;p&gt;
        The CI for most of my tools was on GitHub,
        mainly because many of them predated Wikimedia GitLab (or the availability of GitLab CI there).
        However, I don‚Äôt really fancy giving Microsoft deploy access to my tools,
        so I moved the CI over to GitLab CI.
        For most tools, this was very straightforward,
        to the point where I just copy+pasted the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file between tools.
        (In QuickCategories, setting up a MariaDB service for CI required a little bit more work.)
      &lt;/p&gt;
&lt;h3&gt;Actual build service migration&lt;/h3&gt;
&lt;p&gt;
        The migration to the build service starts with the &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Building_container_images#Procfile"&gt;&lt;code&gt;Procfile&lt;/code&gt;&lt;/a&gt;,
        which tells the infrastructure how to run the tool.
        I used the same &lt;code&gt;Procfile&lt;/code&gt; for all my Python tools:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web: gunicorn --workers=4 app:app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        This defines an entrypoint called &lt;code&gt;web&lt;/code&gt;
        which will run &lt;a href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;,
        with four worker processes, importing &lt;code&gt;app.py&lt;/code&gt; and running the &lt;code&gt;app&lt;/code&gt; WSGI app from it.
        Toolforge specifies the &lt;code&gt;$PORT&lt;/code&gt; environment variable to tell the tool where to listen for connections,
        and Gunicorn will &lt;a href="https://docs.gunicorn.org/en/stable/settings.html#bind"&gt;bind to that port by default&lt;/a&gt; if the environment variable is defined,
        so no explicit &lt;code&gt;--bind&lt;/code&gt; option is necessary.
        Of course, this also requires adding &lt;code&gt;gunicorn&lt;/code&gt; to &lt;code&gt;requirements.in&lt;/code&gt; / &lt;code&gt;requirements.txt&lt;/code&gt;,
        so that it will be installed inside the image.
        Also, don‚Äôt forget to &lt;code&gt;git add Procfile&lt;/code&gt;‚Ä¶
      &lt;/p&gt;
&lt;p&gt;
        A significant benefit of the build service is that it gives us early access to newer Python versions.
        By writing &lt;code&gt;3.13&lt;/code&gt; in a file called &lt;code&gt;.python-version&lt;/code&gt;
        (don‚Äôt forget to &lt;code&gt;git add&lt;/code&gt; this one either!),
        and specifying &lt;code&gt;--use-latest-versions&lt;/code&gt; when running &lt;code&gt;toolforge build start&lt;/code&gt;
        (presumably this will become the default at some point),
        our tool will run on Python 3.13,
        whereas the latest version available outside of the build service is currently Python 3.11
        (&lt;a href="https://phabricator.wikimedia.org/T381899#11027628"&gt;until two weeks or so from now&lt;/a&gt;).
        I didn‚Äôt actually notice any Python 3.13 features I wanted to use in my tools
        (except for one tool where I was able to replace a &lt;code&gt;TypeAlias&lt;/code&gt; annotation with a &lt;code&gt;type&lt;/code&gt; statement),
        but it‚Äôs still nice to use the same version in production as the one I develop on locally.
        (Of course, I also bumped the Python version in CI from 3.11 to 3.13.)
      &lt;/p&gt;
&lt;p&gt;
        That said, there is one issue with Python 3.13 that I had to work around.
        All of my Python tools use the &lt;a href="https://python-toolforge.readthedocs.io/en/latest/"&gt;&lt;code&gt;toolforge&lt;/code&gt; library&lt;/a&gt;
        for its &lt;a href="https://python-toolforge.readthedocs.io/en/latest/usage.html#set-policy-compliant-user-agent"&gt;&lt;code&gt;set_user_agent()&lt;/code&gt; function&lt;/a&gt;
        (it has other features but I mostly don‚Äôt use them);
        this library imports &lt;a href="https://pypi.org/project/PyMySQL/"&gt;PyMySQL&lt;/a&gt; as soon as it is imported.
        PyMySQL, in turn, immediately tries to initialize a default user name for database connections from the environment
        (even if the tool is never going to open a database connection),
        via the Python &lt;code&gt;getpass.getuser()&lt;/code&gt; function.
        However, inside a build service container, no user name is set, and so this function raises an error.
        This was fine in earlier Python versions, because PyMySQL catches the error;
        however, Python 3.13 changed the error being thrown from &lt;code&gt;KeyError&lt;/code&gt; to &lt;code&gt;OSError&lt;/code&gt;,
        which PyMySQL didn‚Äôt catch.
        PyMySQL subsequently &lt;a href="https://github.com/PyMySQL/PyMySQL/commit/a1ac8239c8"&gt;added this error to the &lt;code&gt;except&lt;/code&gt; clause&lt;/a&gt;;
        however, they haven‚Äôt published a new release since that commit.
        Due to this bizarre confluence of edge cases,
        it‚Äôs impossible to import &lt;code&gt;toolforge&lt;/code&gt; or &lt;code&gt;pymysql&lt;/code&gt; in a Toolforge Build Service tool on Python 3.13 or later when using the latest released version of PyMySQL.
        My workaround is to install PyMySQL from Git, using this &lt;code&gt;requirements.in&lt;/code&gt; entry:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pymysql @ git+https://github.com/PyMySQL/PyMySQL@main&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        I look forward to the day when I‚Äôll be able to remove this again.
        &lt;ins&gt;2025-08-25 update: that day was today (around 1AM, so arguably still 24 August), after the release of &lt;a href="https://github.com/PyMySQL/PyMySQL/releases/tag/v1.1.2"&gt;PyMySQL 1.1.2&lt;/a&gt; earlier.&lt;/ins&gt;
&lt;/p&gt;
&lt;p&gt;
        The remaining part of the build service migration is the &lt;code&gt;service.template&lt;/code&gt; file,
        which contains default arguments for calling &lt;code&gt;webservice&lt;/code&gt; commands.
        I changed the &lt;code&gt;type&lt;/code&gt; from &lt;code&gt;python3.11&lt;/code&gt; to &lt;code&gt;buildservice&lt;/code&gt;,
        and also added &lt;code&gt;mount: none&lt;/code&gt; to specify that the tool doesn‚Äôt need NFS mounted.
        Then, after pushing the changes to GitLab and building a new container image,
        I deployed the build service version with commands like this:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;webservice stop &lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;
mv www{,-unused-tool-now-runs-on-buildservice} &lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;
wget https://gitlab.wikimedia.org/toolforge-repos/translate-link/-/raw/2e2349a9fb/service.template &lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;&lt;span class="keyword operator"&gt;&amp;amp;&lt;/span&gt;
webservice start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        This stops the webservice (using the old defaults in &lt;code&gt;www/python/src/service.template&lt;/code&gt;),
        moves the old source code directory away so I don‚Äôt get confused by it later (I‚Äôll remove it eventually‚Ñ¢),
        downloads the new &lt;code&gt;service.template&lt;/code&gt; file right into the home directory,
        and then starts the webservice again using the defaults from that file.
        And last but not least, I updated the instructions in the &lt;code&gt;README.md&lt;/code&gt;
        (initially as a separate commit,
        later in the same big migration commit because I couldn‚Äôt be bothered to separate it anymore).
      &lt;/p&gt;
&lt;h2&gt;More details&lt;/h2&gt;
&lt;p&gt;
        If you want to follow the migrations in more detail,
        you can look at the relevant Git commit ranges and &lt;abbr title="Server Admin Log"&gt;SAL&lt;/abbr&gt; entries:
      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wikidata Lexeme Forms: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/lexeme-forms/-/compare/8c32f8b90c...3c977ccc7b"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.lexeme-forms?d=2025-07-13"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikidata Image Positions: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/wd-image-positions/-/compare/b2bc6237f0...256e149618"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.wd-image-positions?d=2025-07-15"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QuickCategories (was mostly already migrated to the build service from &lt;a href="https://phabricator.wikimedia.org/T374152"&gt;T374152&lt;/a&gt;): &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/quickcategories/-/compare/1be5ca731c...75b652fb6e"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.quickcategories?d=2025-07-15"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SpeedPatrolling: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/speedpatrolling/-/compare/9d8920826c...5c34e3284f"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.speedpatrolling?d=2025-07-26"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PagePile Visual Filter: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/pagepile-visual-filter/-/compare/975e4e6800...ed716e5378"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.pagepile-visual-filter?d=2025-07-26"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ranker: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/ranker/-/compare/e059817c66...60cc18c07b"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.ranker?d=2025-07-23"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Translate Link: &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/translate-link/-/compare/02b7a10a31...e1efca1601"&gt;Git&lt;/a&gt;, &lt;a href="https://sal.toolforge.org/tools.translate-link?d=2025-07-25"&gt;SAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
        At some point, I should also apply most of these improvements to &lt;a href="https://github.com/lucaswerkmeister/cookiecutter-toolforge"&gt;cookiecutter-toolforge&lt;/a&gt;,
        though I‚Äôm not so sure about the split-requirements part
        (I feel like it might overcomplicate the dev setup for other developers for little benefit).
        Let me know what you think :)
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2025/07/29/migrating-tools-to-buildservice/</guid><pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate></item><item><title>Wikimedia Hackathon 2025 recap</title><link>https://lucaswerkmeister.de/posts/2025/05/10/wikimedia-hackathon-2025/</link><description>&lt;article&gt;

&lt;p&gt;
        A week ago, I took part in the &lt;a href="https://www.mediawiki.org/wiki/Wikimedia_Hackathon_2025"&gt;Wikimedia Hackathon 2025&lt;/a&gt;,
        which took place on 2‚Äì4 May (Friday‚ÄìSunday) in Istanbul, Turkey.
        Just like &lt;a href="https://lucaswerkmeister.de/posts/2024/05/15/wikimedia-hackathon-2024/"&gt;last year&lt;/a&gt;
        and &lt;a href="https://lucaswerkmeister.de/posts/2023/06/03/wikimedia-hackathon-2023/"&gt;the year before&lt;/a&gt;,
        I want to write a bit about the experience.
      &lt;/p&gt;
&lt;p&gt;
        I had come into the hackathon with two vague project ideas:
        work on the migration of m3api to Wikimedia GitLab (&lt;a href="https://phabricator.wikimedia.org/T392290"&gt;T392290&lt;/a&gt;),
        especially the documentation (&lt;a href="https://phabricator.wikimedia.org/T392716"&gt;T392716&lt;/a&gt;),
        and continue making local language names translatable on translatewiki.net (&lt;a href="https://phabricator.wikimedia.org/T231755"&gt;T231755&lt;/a&gt;).
        But as sometimes happens at such events, things turned out otherwise.
      &lt;/p&gt;
&lt;p&gt;
        During the travel to the hackathon (i.e. at the airport) and on Thursday evening,
        I got a decent amount of work on m3api in:
        I mostly managed to port the documentation-building release CI to GitLab actions
        (though I‚Äôll still need to get access to push it to doc.wikimedia.org).
        However, also during that evening, in a dinner conversatiaon with &lt;a href="https://www.mediawiki.org/wiki/User:HNordeen_(WMF)"&gt;Haley Nordeen&lt;/a&gt;,
        we came across the idea of ‚ÄúRedactle for Wikidata‚Äù on the venerable
        &lt;a href="https://phabricator.wikimedia.org/T165167"&gt;building more games using Wikidata‚Äôs data&lt;/a&gt; task.
        During the &lt;a href="https://phabricator.wikimedia.org/T392540"&gt;game ideas session&lt;/a&gt; the next morning,
        I decided to try this out, and it ended up becoming my main project of the hackathon.
        (I didn‚Äôt end up working on the local language names at all in the end.)
      &lt;/p&gt;
&lt;p&gt;
        What I had by the time of the showcase on Sunday was not a finished product,
        but at least a playable version of the game,
        called &lt;a href="https://wdactle.toolforge.org/"&gt;WDactle&lt;/a&gt; (&lt;a href="https://gitlab.wikimedia.org/toolforge-repos/wdactle/"&gt;source code&lt;/a&gt;).
        There‚Äôs no ‚Äúpuzzle of the day‚Äù yet (like in Wordle or Redactle),
        just a random puzzle each time you load the page (cached for five minutes).
        And despite the missing features, the game seems to be feasible in principle,
        and more fun than I expected,
        both according to my own experience and what I‚Äôm hearing from others üôÇ
        so I‚Äôll definitely continue working on it.
        (Special thanks to &lt;a href="https://meta.wikimedia.org/wiki/User:SSanchez-WMF"&gt;Sarai S√°nchez&lt;/a&gt;
        for talking through the design with me on Saturday evening!)
      &lt;/p&gt;
&lt;p&gt;
        Of course, the hackathon isn‚Äôt just about hacking on your own projects.
        I don‚Äôt think I directly worked on anyone else‚Äôs project,
        but I was at least able to give some useful pointers and advice to several people.
        I had also announced in the opening session that I could hand out some invite codes to &lt;a href="https://meta.wikimedia.org/wiki/Wikis_World"&gt;Wikis World&lt;/a&gt;,
        and I‚Äôm happy to report that one invite code was successfully exchanged and used!
        And I joined some sessions on the program, including several related to Wikimedia Toolforge and tool development,
        and one on the future of the MediaWiki Action API.
      &lt;/p&gt;
&lt;p&gt;
        On the more social side, I talked to or hung out with a fair amount of people,
        ranging from an impromptu meeting of the &lt;a href="https://wikitech.wikimedia.org/wiki/Help:Toolforge/Toolforge_standards_committee"&gt;Toolforge Standards Committee&lt;/a&gt;
        to a spontaneous magic show (yes!).
        The ‚Äújuggling + rubik‚Äôs cubes‚Äù session from the last two years didn‚Äôt really happen again,
        but we still had some social time before the Kahoot session on Saturday afternoon.
        I also restocked the sweets table with chocolate several times.
        Sadly, although Taavi and I brought our bl√•hajar,
        we didn‚Äôt have a proper Wikimedia Cuteness Association meetup this year üòî
      &lt;/p&gt;
&lt;p&gt;
        As usual, I posted about my hackathon experience on Mastodon,
        this time with separate threads for &lt;a href="https://wikis.world/@LucasWerkmeister/114430682133543886"&gt;Thursday&lt;/a&gt;,
        &lt;a href="https://wikis.world/@LucasWerkmeister/114436950287170418"&gt;Friday&lt;/a&gt;,
        &lt;a href="https://wikis.world/@LucasWerkmeister/114442409903718033"&gt;Saturday&lt;/a&gt;,
        &lt;a href="https://wikis.world/@LucasWerkmeister/114447994481484488"&gt;Sunday&lt;/a&gt; and
        &lt;a href="https://wikis.world/@LucasWerkmeister/114453519361216347"&gt;Monday&lt;/a&gt;.
        As you can see there, I traveled to and from the hackathon by plane this year;
        I looked into other options (ever heard of this thing called the ‚Äúorient express‚Äù??),
        but didn‚Äôt think that any of them looked feasible to me.
        (Clearly I should‚Äôve coordinated with Pintoch, who apparently found a way after all!)
        I hope next year will be a little bit closer to Berlin again üôÇ
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2025/05/10/wikimedia-hackathon-2025/</guid><pubDate>Sat, 10 May 2025 00:00:00 GMT</pubDate></item><item><title>Introducing m3api</title><link>https://lucaswerkmeister.de/posts/2025/04/12/introducing-m3api/</link><description>&lt;article&gt;

&lt;p&gt;
        For the past couple of years, I‚Äôve been working on a new JavaScript library for the MediaWiki Action API, called &lt;strong&gt;m3api&lt;/strong&gt;.
        On the occasion of its 1.0.0 release today,
        I want to talk about why I wrote it, what it does, and why I think you should use it :)
      &lt;/p&gt;
&lt;h2 id="quick-links"&gt;Quick links&lt;/h2&gt;
&lt;p&gt;
&lt;a href="https://www.npmjs.com/package/m3api"&gt;npm package&lt;/a&gt;,
        &lt;a href="https://github.com/lucaswerkmeister/m3api/"&gt;GitHub repository&lt;/a&gt;,
        &lt;a href="https://lucaswerkmeister.github.io/m3api/"&gt;documentation&lt;/a&gt;,
        &lt;a href="https://github.com/lucaswerkmeister/m3api-examples/"&gt;examples&lt;/a&gt;.
      &lt;/p&gt;
&lt;h2 id="why-a-new-library"&gt;Why a new JS library for the MediaWiki API?&lt;/h2&gt;
&lt;p&gt;
        So why did I write a new library for the MediaWiki API at all?
        Aren‚Äôt there &lt;a href="https://www.mediawiki.org/wiki/API:Client_code/All#JavaScript"&gt;enough of them&lt;/a&gt; already?
      &lt;/p&gt;
&lt;p&gt;
        I was looking for a library fulfilling two criteria,
        and didn‚Äôt find any that fulfilled both:
      &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
          Cross-platform: I want to be able to use the same interface to the API whether I‚Äôm writing code for the browser or for Node.js.
          (Small differences in setup are acceptable, but once setup is done, the interface should be uniform.)
          This apparently rules out virtually all the libraries;
          the only known exception on the list of libraries linked above (apart from m3api itself)
          is &lt;a href="https://github.com/kanasimi/CeJS"&gt;CeJS&lt;/a&gt;, which is a mystery to me.
          &lt;!-- This phrasing is kind of ambiguous: it could mean ‚ÄúCeJS is a mystery‚Äù or ‚Äúthe fact that no other library is cross-platform is a mystery‚Äù. But I agree with both ^^ --&gt;
&lt;/li&gt;
&lt;li&gt;
          Reasonably modern: at a minimum, this means promises rather than callbacks.
          (As far as I can tell, this rules out CeJS, along with many other libraries.)
          Additional modern things that would be nice to have
          are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator"&gt;async generators&lt;/a&gt; as the interface for API continuation
          and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;ES6 modules&lt;/a&gt; instead of Node.js &lt;code&gt;require()&lt;/code&gt; / UMD / etc.
        &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
        Since I couldn‚Äôt find a library matching my needs, I wrote it :)
      &lt;/p&gt;
&lt;h2 id="main-characteristics"&gt;Main characteristics&lt;/h2&gt;
&lt;p&gt;
&lt;a href="https://www.martinfowler.com/bliki/TwoHardThings.html"&gt;Naming things is hard&lt;/a&gt;;
        m3api stands for ‚Äú&lt;strong&gt;minimal, modern MediaWiki API [client]&lt;/strong&gt;‚Äù (three ‚Äòm‚Äôs, you see).
        I‚Äôve already mentioned ‚Äúmodern‚Äù above ‚Äì
        m3api uses promises, async generators, ES6 modules,
        but also &lt;code&gt;fetch()&lt;/code&gt; (even in Node ‚Äì yay for &lt;a href="https://nodejs.org/en/learn/getting-started/fetch"&gt;undici&lt;/a&gt;),
        &lt;code&gt;class&lt;/code&gt; syntax, object spreading and destructuring,
        &lt;code&gt;FormData&lt;/code&gt; / &lt;code&gt;Blob&lt;/code&gt; / &lt;code&gt;File&lt;/code&gt; for file parameters, and more.
        (Some of this felt fairly ‚Äúbleeding edge‚Äù when I started working on m3api,
        but keep in mind that this was almost five years ago.
        m3api may not support all the &lt;a href="https://www.mediawiki.org/wiki/Compatibility#Browsers"&gt;browsers supported by MediaWiki&lt;/a&gt;,
        but it does support the Node.js version that was shipped in stable Debian 12 (Bookworm) two years ago.)
      &lt;/p&gt;
&lt;p&gt;
        I want to elaborate on the ‚Äúminimal‚Äù term a bit more.
        Basically, the point is that I‚Äôm familiar with the MediaWiki Action API,
        and I don‚Äôt like libraries that aim to hide the API from me.
        I‚Äôm wary of basic &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;&lt;abbr title="create, read, update, delete"&gt;CRUD&lt;/abbr&gt;&lt;/a&gt; abstraction methods;
        the &lt;code&gt;action=edit&lt;/code&gt; API has plenty of useful options,
        many of which a higher-level method probably doesn‚Äôt make available.
        I want a library that helps me to work with the API directly.
        (I don‚Äôt mind if it &lt;em&gt;also&lt;/em&gt; offers abstraction methods, but they‚Äôre not a high priority for me when writing my own library.
        Also, some other libraries seem to make it relatively hard to make direct API requests.)
      &lt;/p&gt;
&lt;p&gt;
        However, ‚Äúminimal‚Äù doesn‚Äôt mean that the library doesn‚Äôt have any features.
        There are plenty of features designed to make it easier to use the API;
        my basic rule of thumb is that the feature should be useful with more than one API action.
        For example, API continuation is present in several API actions, and somewhat tedious to use ‚Äúmanually‚Äù,
        so m3api offers support for it.
      &lt;/p&gt;
&lt;p&gt;
        In addition to that, there are also several extension packages for m3api,
        as well as &lt;a href="https://github.com/lucaswerkmeister/m3api/#creating-extension-packages"&gt;guidelines&lt;/a&gt;
        for others to implement additional extension packages.
        These implement support for specific API modules
        (&lt;a href="https://github.com/lucaswerkmeister/m3api-query/"&gt;m3api-query&lt;/a&gt; for &lt;code&gt;action=query&lt;/code&gt;,
        &lt;a href="https://github.com/lucaswerkmeister/m3api-botpassword/"&gt;m3api-botpassword&lt;/a&gt; for &lt;code&gt;action=login&lt;/code&gt;)
        or other functionality that doesn‚Äôt belong in m3api itself
        (&lt;a href="https://github.com/lucaswerkmeister/m3api-oauth2/"&gt;m3api-oauth2&lt;/a&gt; for the OAuth 2.0 authorization flow).
        In combination, these libraries are intended to provide,
        if not a full API framework,
        then at least a powerful and flexible toolkit for working with the API.
      &lt;/p&gt;
&lt;h2 id="basic-interface"&gt;Basic interface&lt;/h2&gt;
&lt;p&gt;
        The simplest way to make an API request with m3api looks like this:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; Session &lt;span class="keyword"&gt;from&lt;/span&gt; &lt;span class="string"&gt;'m3api/node.js'&lt;/span&gt;;
&lt;span class="storage type"&gt;const&lt;/span&gt; session &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="variable type"&gt;Session&lt;/span&gt;( &lt;span class="string"&gt;'en.wikipedia.org'&lt;/span&gt; );
&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;(
	{ action: &lt;span class="string"&gt;'query'&lt;/span&gt;, meta: &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        You can also specify default parameters that should apply to every request of a session when creating it:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; Session &lt;span class="keyword"&gt;from&lt;/span&gt; &lt;span class="string"&gt;'m3api/node.js'&lt;/span&gt;;
&lt;span class="storage type"&gt;const&lt;/span&gt; session &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="variable type"&gt;Session&lt;/span&gt;(
	&lt;span class="string"&gt;'en.wikipedia.org'&lt;/span&gt;,
	{ formatversion: &lt;span class="constant numeric"&gt;2&lt;/span&gt; },
);
&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;(
	{ action: &lt;span class="string"&gt;'query'&lt;/span&gt;, meta: &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        These examples specify &lt;em&gt;parameters&lt;/em&gt; to send to the API (&lt;code&gt;action=query&lt;/code&gt;, &lt;code&gt;meta=siteinfo&lt;/code&gt;, &lt;code&gt;formatversion=2&lt;/code&gt;).
        Additionally, you can specify &lt;em&gt;options&lt;/em&gt; as another object after the parameters,
        which instead influence how m3api sends the request.
        One option that you should always set is the &lt;code&gt;userAgent&lt;/code&gt;, which controls the &lt;code&gt;User-Agent&lt;/code&gt; HTTP header
        (see the &lt;a href="https://meta.wikimedia.org/wiki/Special:MyLanguage/User-Agent_policy"&gt;User-Agent policy&lt;/a&gt;).
        Usually, you would set this option for all requests when creating the session:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; Session &lt;span class="keyword"&gt;from&lt;/span&gt; &lt;span class="string"&gt;'m3api/node.js'&lt;/span&gt;;
&lt;span class="storage type"&gt;const&lt;/span&gt; session &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="variable type"&gt;Session&lt;/span&gt;(
	&lt;span class="string"&gt;'en.wikipedia.org'&lt;/span&gt;,
	{ formatversion: &lt;span class="constant numeric"&gt;2&lt;/span&gt; },
	{ userAgent: &lt;span class="string"&gt;'introducing-m3api-blog-post'&lt;/span&gt; },
);
&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;(
	{ action: &lt;span class="string"&gt;'query'&lt;/span&gt;, meta: &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        But you could also set it on the individual request, if you wanted:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;import&lt;/span&gt; Session &lt;span class="keyword"&gt;from&lt;/span&gt; &lt;span class="string"&gt;'m3api/node.js'&lt;/span&gt;;
&lt;span class="storage type"&gt;const&lt;/span&gt; session &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="variable type"&gt;Session&lt;/span&gt;(
	&lt;span class="string"&gt;'en.wikipedia.org'&lt;/span&gt;,
	{ formatversion: &lt;span class="constant numeric"&gt;2&lt;/span&gt; },
);
&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;(
	{ action: &lt;span class="string"&gt;'query'&lt;/span&gt;, meta: &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; },
	{ userAgent: &lt;span class="string"&gt;'introducing-m3api-blog-post'&lt;/span&gt; },
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        (It doesn‚Äôt make much sense to set the &lt;code&gt;userAgent&lt;/code&gt; per request,
        but there are other options where it‚Äôs more useful,
        e.g. &lt;code&gt;method: 'POST'&lt;/code&gt; and &lt;code&gt;tokenType: 'csrf'&lt;/code&gt;.)
      &lt;/p&gt;
&lt;p&gt;
        Other functions generally also follow this pattern of taking parameters followed by options,
        with the options being, well, optional.
        Both the parameters and options are merged with the defaults from the constructor,
        making for a convenient and uniform interface.
      &lt;/p&gt;
&lt;p&gt;
        In addition to strings, parameter values can also be numbers, booleans, and arrays, for example:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;( {
	action: &lt;span class="string"&gt;'query'&lt;/span&gt;,
	meta: [ &lt;span class="string"&gt;'siteinfo'&lt;/span&gt;, &lt;span class="string"&gt;'userinfo'&lt;/span&gt; ],
	curtimestamp: &lt;span class="constant language"&gt;true&lt;/span&gt;,
	formatversion: &lt;span class="constant numeric"&gt;2&lt;/span&gt;,
} );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        List parameters can also be sets instead of arrays; more on that &lt;a href="https://lucaswerkmeister.de/posts/2025/04/12/introducing-m3api/#combining-requests"&gt;below&lt;/a&gt;.
      &lt;/p&gt;
&lt;h2 id="api-continuation"&gt;API continuation&lt;/h2&gt;
&lt;p&gt;
        As mentioned above, m3api includes support for API continuation.
        I‚Äôm not aware of a great explanation of this feature in the API,
        so I‚Äôll just use this section to talk about it in general as well as how m3api supports it ^^
      &lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Continuation&lt;/em&gt; is the mechanism by which the API returns a limited set of data
        while enabling you to make further requests to fetch additional data.
        The MediaWiki Action API‚Äôs continuation mechanism is highly flexible;
        a single API request can use many different modules, each of which contributes to continuation,
        and it all works out.
      &lt;/p&gt;
&lt;p&gt;
        The basic principle is that the API may return,
        as part of the response,
        a &lt;code&gt;continue&lt;/code&gt; object with parameters you should send with your next request.
        For instance, if you make an API request with &lt;code&gt;action=query&lt;/code&gt; and &lt;code&gt;list=allpages&lt;/code&gt;,
        the response may include &lt;code&gt;"continue": { "apcontinue": "!important" }&lt;/code&gt;;
        your next request should then use the parameters
        &lt;code&gt;action=query&lt;/code&gt;, &lt;code&gt;list=allpages&lt;/code&gt; and &lt;code&gt;apcontinue=!important&lt;/code&gt;.
        Continuation is finished when there is no &lt;code&gt;continue&lt;/code&gt; object in a response.
      &lt;/p&gt;
&lt;p&gt;
        In m3api, the main interface to continuation is the &lt;code&gt;requestAndContinue()&lt;/code&gt; method,
        which returns an async generator.
        It‚Äôs typically used in a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of"&gt;&lt;code&gt;for await&lt;/code&gt; loop&lt;/a&gt; like this:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; ( &lt;span class="storage type"&gt;const&lt;/span&gt; response of session.&lt;span class="function call"&gt;requestAndContinue&lt;/span&gt;( {
	action: &lt;span class="string"&gt;'query'&lt;/span&gt;,
	list: &lt;span class="string"&gt;'allpages'&lt;/span&gt;,
} ) ) {
	console.&lt;span class="function call"&gt;log&lt;/span&gt;( response );
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        Each &lt;code&gt;response&lt;/code&gt; is a response object like would be returned from a normal &lt;code&gt;request()&lt;/code&gt; call.
        You can &lt;code&gt;break;&lt;/code&gt; out of the loop at any time to stop making additional requests.
      &lt;/p&gt;
&lt;p&gt;
        The above example shows a ‚Äúsimple‚Äù case of continuation:
        each request produces one ‚Äúbatch‚Äù of pages (or, for some modules, revisions),
        and the next request continues with the next batch of different pages.
        However, it‚Äôs possible for a response to not contain the full data of one batch of pages.
        (An extreme example of this would be
        &lt;code&gt;action=query&lt;/code&gt;, &lt;code&gt;generator=querypage&lt;/code&gt;, &lt;code&gt;gqppage=Longpages&lt;/code&gt;, &lt;code&gt;gqplimit=500&lt;/code&gt;,
        &lt;code&gt;prop=revisions&lt;/code&gt;, &lt;code&gt;rvprop=text&lt;/code&gt; ‚Äì
        that is, the text content of the 500 longest pages on the wiki.
        This will run into the response size limit very quickly,
        but the batch still contains all 500 longest pages,
        even though not all 500 are returned with their text in the same response.)
        In this case, continuation will first proceed &lt;em&gt;within&lt;/em&gt; one batch of pages
        (i.e., requests will return additional data for the same set of pages),
        and only proceed to the next batch after the full data for the previous batch has been returned,
        spread across multiple API responses.
        (It‚Äôs the caller‚Äôs responsibility to merge those responses back together again in a way that makes sense.)
        You can distinguish between these cases by the &lt;code&gt;batchcomplete&lt;/code&gt; member in the response:
        if it‚Äôs present (set to &lt;code&gt;""&lt;/code&gt; in &lt;code&gt;formatversion=1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;formatversion=2&lt;/code&gt;),
        then the request returned the full set of data for the current batch of pages,
        and following continuation will proceed to the next batch;
        if it‚Äôs not present, then the request didn‚Äôt return the full data yet,
        and following continuation will yield additional data for the same batch of pages.
      &lt;/p&gt;
&lt;p&gt;
        m3api supports this distinction too, using the &lt;code&gt;requestAndContinueReducingBatch()&lt;/code&gt; method.
        It also returns an async generator,
        but follows continuation internally until the end of a batch has been reached,
        yielding a value that represents the combined result of all the responses for that batch.
        If you continue iterating over the async generator, it will continue with the next batch, and so on.
        When you use this method, you have to provide a &lt;code&gt;reducer()&lt;/code&gt; callback,
        which somehow merges the latest API response into the current accumulated value.
        The initial value for each batch can be specified via another callable,
        and otherwise defaults to &lt;code&gt;{}&lt;/code&gt; (empty object).
        This interface is similar to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;&lt;code&gt;Array.reduce()&lt;/code&gt;&lt;/a&gt;
        (hence the name; elsewhere this operation is also known as &lt;a href="https://www.wikidata.org/wiki/Special:GoToLinkedPage/enwiki/Q951651"&gt;fold&lt;/a&gt;),
        but with a separate ‚Äúreduction‚Äù taking place for each batch of pages returned by the API.
      &lt;/p&gt;
&lt;p&gt;
&lt;code&gt;requestAndContinueReducingBatch()&lt;/code&gt; is a fairly low-level method,
        and is not intended to be used directly.
        The &lt;a href="https://github.com/lucaswerkmeister/m3api-query/"&gt;m3api-query&lt;/a&gt; extension package offers some more convenient methods
        (assuming you‚Äôre using &lt;code&gt;action=query&lt;/code&gt;):
        &lt;code&gt;queryFullPageByTitle()&lt;/code&gt;, &lt;code&gt;queryFullPageByPageId()&lt;/code&gt; and &lt;code&gt;queryFullRevisionByRevisionId()&lt;/code&gt;
        return the full data for a single page or revision (even that can be split across multiple responses!),
        while &lt;code&gt;queryFullPages()&lt;/code&gt; and &lt;code&gt;queryFullRevisions()&lt;/code&gt;
        return async generators that yield full pages or revisions.
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; ( &lt;span class="storage type"&gt;const&lt;/span&gt; page of &lt;span class="function call"&gt;queryFullPages&lt;/span&gt;( session, {
	action: &lt;span class="string"&gt;'query'&lt;/span&gt;,
	list: &lt;span class="string"&gt;'allpages'&lt;/span&gt;,
} ) ) {
	console.&lt;span class="function call"&gt;log&lt;/span&gt;( page );
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        You get a simple, flat stream of pages,
        and don‚Äôt have to care that some of them may have been returned in the same response,
        others in a later response,
        and some may even have been split across multiple responses.
        The way in which pages from multiple responses are merged is configurable via the options,
        but the default should work for most cases.
        This is one of the parts of m3api I‚Äôm proudest of ‚Äì
        making it easy to correctly work with API continuation.
      &lt;/p&gt;
&lt;h2 id="combining-requests"&gt;Combining requests&lt;/h2&gt;
&lt;p&gt;
        Another m3api feature I‚Äôm proud of is automatically combining concurrent compatible requests.
        The idea is taken from the &lt;a href="https://www.wikidata.org/wiki/Special:MyLanguage/Wikidata:Wikidata_Bridge"&gt;Wikidata Bridge&lt;/a&gt;
        (an interface to edit Wikidata from Wikipedia),
        where the Wikidata team at Wikimedia Germany (that I‚Äôm a part of) implemented something similar.
        (I reimplemented the idea from scratch in m3api to avoid infringing any copyright.)
      &lt;/p&gt;
&lt;p&gt;
        The Wikidata Bridge needs to load a lot of information from the API when it initializes itself:
      &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=Data-Bridge&amp;amp;prop=info&amp;amp;intestactions=edit&amp;amp;intestactionsdetail=full&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;Whether the user has permission to edit the Wikipedia article.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://de.wikipedia.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;meta=siteinfo&amp;amp;siprop=restrictions&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The Wikipedia site‚Äôs restriction levels, to determine what kind of protection the article has.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;errorformat=raw&amp;amp;formatversion=2&amp;amp;titles=Q11&amp;amp;prop=info&amp;amp;intestactions=edit&amp;amp;intestactionsdetail=full"&gt;Whether the user has permission to edit the Wikidata item.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;meta=siteinfo&amp;amp;errorformat=raw&amp;amp;formatversion=2&amp;amp;siprop=restrictions"&gt;The Wikidata site‚Äôs restriction levels, to determine what kind of protection the item has.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;meta=siteinfo&amp;amp;errorformat=raw&amp;amp;formatversion=2&amp;amp;siprop=autocreatetempuser"&gt;Whether the Wikidata site has temporary accounts enabled, to determine whether to show a ‚Äúyour IP address will be publicly visible‚Äù warning.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;meta=wbdatabridgeconfig&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The bridge configuration on Wikidata.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=wbgetentities&amp;amp;format=json&amp;amp;props=datatype&amp;amp;ids=P443&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The data type of the property of the statement being edited.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=wbgetentities&amp;amp;format=json&amp;amp;props=info&amp;amp;ids=Q11&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The latest revision ID of the item being edited.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=wbgetentities&amp;amp;format=json&amp;amp;props=claims&amp;amp;ids=Q11&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The statements of the item being edited.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=wbgetentities&amp;amp;format=json&amp;amp;props=labels&amp;amp;ids=P443&amp;amp;languages=de&amp;amp;languagefallback=true&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;The label of the property of the statement being edited.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
        A na√Øve implementation would make up to ten separate API requests to get this information
        (I‚Äôve linked them above for the &lt;a href="https://de.wikipedia.beta.wmflabs.org/wiki/Data-Bridge"&gt;Beta Wikidata Bridge demo page&lt;/a&gt;).
        However, due to how API modules are designed to be flexible in which data they return,
        and how parameters that specify ‚ÄúI‚Äôd like &lt;em&gt;this&lt;/em&gt; piece of data‚Äù are often multi-valued,
        you can also combine them into just three requests:
        &lt;a href="https://de.wikipedia.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=Data-Bridge&amp;amp;prop=info&amp;amp;meta=siteinfo&amp;amp;intestactions=edit&amp;amp;intestactionsdetail=full&amp;amp;siprop=restrictions&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;action=query on Wikipedia&lt;/a&gt; (1 and 2),
        &lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=query&amp;amp;format=json&amp;amp;meta=wbdatabridgeconfig|siteinfo&amp;amp;errorformat=raw&amp;amp;formatversion=2&amp;amp;titles=Q11&amp;amp;prop=info&amp;amp;intestactions=edit&amp;amp;intestactionsdetail=full&amp;amp;siprop=autocreatetempuser|restrictions"&gt;action=query on Wikidata&lt;/a&gt; (3 to 6),
        and &lt;a href="https://wikidata.beta.wmflabs.org/w/api.php?action=wbgetentities&amp;amp;format=json&amp;amp;props=labels%7Cdatatype%7Cinfo%7Cclaims&amp;amp;ids=P443%7CQ11&amp;amp;languages=de&amp;amp;languagefallback=true&amp;amp;errorformat=raw&amp;amp;formatversion=2"&gt;action=wbgetentities on Wikidata&lt;/a&gt; (7 to 10).
        The simple approach to implement the initialization with just three requests
        would be to have one big blob of code that makes all the requests and extracts all the information from the responses,
        but this wouldn‚Äôt be very readable or maintainable:
        we‚Äôd rather have a bunch of &lt;a href="https://gerrit.wikimedia.org/g/mediawiki/extensions/Wikibase/+/a8f78a9456/client/data-bridge/src/data-access/ApiEntityLabelRepository.ts"&gt;smaller&lt;/a&gt;,
        &lt;a href="https://gerrit.wikimedia.org/g/mediawiki/extensions/Wikibase/+/a8f78a9456/client/data-bridge/src/data-access/ApiPropertyDataTypeRepository.ts"&gt;self-contained&lt;/a&gt;
&lt;a href="https://gerrit.wikimedia.org/g/mediawiki/extensions/Wikibase/+/a8f78a9456/client/data-bridge/src/data-access/ApiReadingEntityRepository.ts"&gt;services&lt;/a&gt;
        that each just specify the request parameters they need and extract the parts of the response that concern them.
        But how do we then combine those requests?
      &lt;/p&gt;
&lt;p&gt;
        One approach I‚Äôve used in the Wikidata Image Positions tool (written in Python)
        is to explicitly split the API requests into three ‚Äúphases‚Äù: assemble the parameters, make the request, process the response.
        Then you can assemble the parameters from multiple requests, make only one request, and process the same response multiple times
        (example based on &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/wd-image-positions/-/blob/b8022cddca/app.py#L697"&gt;&lt;code&gt;load_image()&lt;/code&gt;&lt;/a&gt;):
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query_params &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="function call"&gt;query_default_params&lt;/span&gt;()
&lt;span class="function call"&gt;image_attribution_query_add_params&lt;/span&gt;(
    query_params,
    image_title,
)
&lt;span class="function call"&gt;image_size_query_add_params&lt;/span&gt;(
    query_params,
    image_title,
)

query_response &lt;span class="keyword operator"&gt;=&lt;/span&gt; session.&lt;span class="function call"&gt;get&lt;/span&gt;(&lt;span class="keyword operator"&gt;*&lt;/span&gt;&lt;span class="keyword operator"&gt;*&lt;/span&gt;query_params)

attribution &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="function call"&gt;image_attribution_query_process_response&lt;/span&gt;(
    query_response,
    image_title,
)
width, height &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="function call"&gt;image_size_query_process_response&lt;/span&gt;(
    query_response,
    image_title,
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        But this is fairly cumbersome,
        and also requires the calling code to know which requests can be combined and which can‚Äôt.
        We can do better.
      &lt;/p&gt;
&lt;p&gt;
        Because all requests are asynchronous in JavaScript, &lt;!-- please do not @ me about sync XHR --&gt;
        our &lt;code&gt;request()&lt;/code&gt; function can return a &lt;code&gt;Promise&lt;/code&gt; without immediately making an underlying network request.
        We can then wait for a very short period
        (specifically, until the next &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide"&gt;microtask&lt;/a&gt;),
        and see if any other requests come in during that time;
        if they do, we check if they‚Äôre compatible, and potentially merge them into the pending request.
        Then, we send the pending request(s),
        and resolve the associated promises with the response(s).
      &lt;/p&gt;
&lt;p&gt;
        The effect of this is that,
        when several compatible requests are made within the same JS event loop run,
        then m3api can merge them automatically.
        Most often, making several requests within the same JS event loop run looks like a call to &lt;code&gt;Promise.all()&lt;/code&gt; with several requests
        (see the example below).
      &lt;/p&gt;
&lt;p&gt;
        To determine whether requests are compatible,
        we need to distinguish between list-type parameters that can be merged,
        and ones that can‚Äôt be.
        The convention we used in the Wikidata Bridge,
        and which I reused for m3api,
        is that mergeable parameters are specified as &lt;code&gt;Set&lt;/code&gt;s,
        while unmergeable parameters are specified as &lt;code&gt;Array&lt;/code&gt;s.
        (The reasoning behind this is that, in many other languages, sets are unordered,
        and when a parameter is mergeable then you probably don‚Äôt care about the order the parameters are sent in;
        conversely, when you care about the order, you probably don‚Äôt want another request‚Äôs values to be inserted in front of yours.
        This doesn‚Äôt 100% apply in JavaScript because &lt;code&gt;Set&lt;/code&gt;s obey insertion order,
        but I think it still makes some sense.)
        So, two requests are compatible if all their parameters either only occur in one request
        (e.g. one has &lt;code&gt;list=allpages&lt;/code&gt; while the other has &lt;code&gt;meta=siteinfo&lt;/code&gt;),
        have the same value in both requests
        (e.g. both have &lt;code&gt;action=query&lt;/code&gt;),
        or are specified as &lt;code&gt;Set&lt;/code&gt; in both requests.
        To make creating &lt;code&gt;Set&lt;/code&gt;s more convenient,
        a &lt;code&gt;set()&lt;/code&gt; helper function is provided,
        so that e.g. requests with &lt;code&gt;list: set( 'allpages' )&lt;/code&gt; and &lt;code&gt;list: set( 'allusers' )&lt;/code&gt; are compatible.
      &lt;/p&gt;
&lt;p&gt;
        The upshot of this is that the following example code will only make one underlying network request,
        with &lt;code&gt;siprop=general|statistics&lt;/code&gt;:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="storage function"&gt;function&lt;/span&gt; &lt;span class="entity name function"&gt;getSiteName&lt;/span&gt;( session ) {
	&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;( {
		action: &lt;span class="string"&gt;'query'&lt;/span&gt;,
		meta: &lt;span class="function call"&gt;set&lt;/span&gt;( &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; ),
		siprop: &lt;span class="function call"&gt;set&lt;/span&gt;( &lt;span class="string"&gt;'general'&lt;/span&gt; ),
	} );
	&lt;span class="keyword"&gt;return&lt;/span&gt; response.query.general.sitename;
}

&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="storage function"&gt;function&lt;/span&gt; &lt;span class="entity name function"&gt;getSiteEdits&lt;/span&gt;( session ) {
	&lt;span class="storage type"&gt;const&lt;/span&gt; response &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; session.&lt;span class="function call"&gt;request&lt;/span&gt;( {
		action: &lt;span class="string"&gt;'query'&lt;/span&gt;,
		meta: &lt;span class="function call"&gt;set&lt;/span&gt;( &lt;span class="string"&gt;'siteinfo'&lt;/span&gt; ),
		siprop: &lt;span class="function call"&gt;set&lt;/span&gt;( &lt;span class="string"&gt;'statistics'&lt;/span&gt; ),
	} );
	&lt;span class="keyword"&gt;return&lt;/span&gt; response.query.statistics.edits;
}

&lt;span class="storage type"&gt;const&lt;/span&gt; [ sitename, edits ] &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="support class promise"&gt;Promise&lt;/span&gt;.&lt;span class="function call"&gt;all&lt;/span&gt;( [
	&lt;span class="function call"&gt;getSiteName&lt;/span&gt;( session ),
	&lt;span class="function call"&gt;getSiteEdits&lt;/span&gt;( session ),
] );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        In principle, it‚Äôs possible that automatically combining requests will cause bugs in code written by developers who aren‚Äôt aware of this m3api feature.
        (For example, if someone doesn‚Äôt use m3api-query,
        they might use code like &lt;code&gt;response.query.pages[ 0 ]&lt;/code&gt; to access the only page they expect to be present in the response,
        without realizing that a merged request may have caused further pages to be returned.)
        However, I hope that this will be rare,
        thanks to the combination of requests only being combined if they happen within the same JS event loop run
        and array-type parameters not being eligible for combining.
        If I get a lot of bug reports about this feature,
        I may reconsider it for the next major version.
        (If you want to make absolutely sure that a particular request will not be combined with any other,
        specify the &lt;code&gt;action&lt;/code&gt; as a single-element array,
        e.g. &lt;code&gt;action: [ 'query' ]&lt;/code&gt; ‚Äì
        every other request will also specify the &lt;code&gt;action&lt;/code&gt; parameter,
        and they‚Äôll all be incompatible,
        because arrays are not mergeable.)
      &lt;/p&gt;
&lt;h2 id="error-handling"&gt;Error handling&lt;/h2&gt;
&lt;p&gt;
        As you might expect, m3api detects errors in the response and throws them
        (or, if you prefer, it rejects the promise, because all of this is async).
        As you might also expect, any warnings in the response are detected and, by default, logged to the console via &lt;code&gt;console.warn()&lt;/code&gt;.
        (I was actually surprised to discover the other day that MediaWiki‚Äôs own &lt;code&gt;mw.Api()&lt;/code&gt; doesn‚Äôt do this.
        God knows how many on-wiki gadgets and user scripts use deprecated API parameters without realizing it because the warnings returned by the API go straight to &lt;code&gt;/dev/null&lt;/code&gt;‚Ä¶)
      &lt;/p&gt;
&lt;p&gt;
        m3api also supports transparently handling errors without throwing them.
        Several errors returned by the API can be handled by retrying the request in some form;
        m3api‚Äôs approach is to retry requests until a certain time limit (by default, 65¬†seconds) after the initial request has passed ‚Äì
        I think this makes more sense than limiting the absolute number of retries, as some other libraries do.
        (You can change the limit using the &lt;code&gt;maxRetriesSeconds&lt;/code&gt; request option ‚Äì
        bots may want to use a much longer limit than interactive applications.)
        If the response by the API includes a &lt;code&gt;Retry-After&lt;/code&gt; header, m3api will obey it (as long as it‚Äôs within said time limit);
        otherwise, error handlers for different error codes can be configured,
        which may likewise retry the request.
        m3api ships error handlers for &lt;code&gt;badtoken&lt;/code&gt; (update the token, then retry),
        &lt;code&gt;maxlag&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt; errors (sleep for an appropriate time period, then retry).
        The &lt;a href="https://github.com/lucaswerkmeister/m3api-oauth2/"&gt;m3api-oauth2&lt;/a&gt; extension package
        installs an error handler to refresh expired OAuth 2 access tokens
        (on Wikimedia wikis, they expire after 4¬†hours)
        and then retry the request.
        These retries are always transparent to the code that made the request.
      &lt;/p&gt;
&lt;h2 id="why-you-should-use-it"&gt;Why you should use it&lt;/h2&gt;
&lt;p&gt;
        I‚Äôm of course biased, but I happen to think it‚Äôs a well-designed library, for various reasons including the ones detailed above ;)
        but I‚Äôll close by mentioning some of the recommendations in the &lt;a href="https://www.mediawiki.org/wiki/API:Etiquette"&gt;API Etiquette&lt;/a&gt;
        (&lt;a href="https://www.mediawiki.org/w/index.php?title=API:Etiquette&amp;amp;oldid=7556535"&gt;permalink&lt;/a&gt;)
        and outlining how m3api aligns with them:
      &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;request limit&lt;/dt&gt;
&lt;dd&gt;
          This is partially up to the developer using m3api, but m3api supports ‚Äúask[ing] for multiple items in one request‚Äù,
          both manually by specifying parameters as lists or sets (e.g. &lt;code&gt;titles: set( 'PageA', 'PageB', 'PageC' )&lt;/code&gt;)
          and automatically by combining requests as explained above.
          Also, as mentioned in the error handling section,
          &lt;code&gt;Retry-After&lt;/code&gt; response headers are respected;
          this isn‚Äôt explicitly mentioned on the API Etiquette page, but I‚Äôve heard it‚Äôs still considered good bot practice.
        &lt;/dd&gt;
&lt;dt&gt;maxlag&lt;/dt&gt;
&lt;dd&gt;
          Specifying the maxlag parameter is up to the developer using m3api,
          but m3api &lt;a href="https://github.com/lucaswerkmeister/m3api/?tab=readme-ov-file#recommendations-for-bots"&gt;recommends it&lt;/a&gt; for bots,
          and if it is used, then m3api will automatically wait and retry the request if the API returns a maxlag error.
        &lt;/dd&gt;
&lt;dt&gt;User-Agent header&lt;/dt&gt;
&lt;dd&gt;
          m3api sends a general User-Agent header for itself by default,
          and also &lt;a href="https://github.com/lucaswerkmeister/m3api/?tab=readme-ov-file#usage-recommendations"&gt;encourages&lt;/a&gt; developers to specify a custom User-Agent header.
          If developers neglect to specify the &lt;code&gt;userAgent&lt;/code&gt; request option,
          a warning is logged (by default, to &lt;code&gt;console.warn()&lt;/code&gt;, where it should be relatively visible).
        &lt;/dd&gt;
&lt;dt&gt;data formats&lt;/dt&gt;
&lt;dd&gt;
          m3api uses the JSON format (of course).
        &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
        If you‚Äôre already using a different API library or framework,
        you‚Äôre free to continue using it, naturally.
        But if you‚Äôre currently making network requests to the API directly,
        or if you‚Äôre going to start a new project where you need to interact with the API,
        I encourage you to give m3api a try.
        And if you use it, please let me know how it‚Äôs working for you!
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2025/04/12/introducing-m3api/</guid><pubDate>Sat, 12 Apr 2025 00:00:00 GMT</pubDate></item><item><title>Why MediaWiki permanent links aren‚Äôt fully permanent</title><link>https://lucaswerkmeister.de/posts/2024/08/14/mediawiki-permalinks/</link><description>&lt;article&gt;

&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/MediaWiki"&gt;MediaWiki&lt;/a&gt;,
        the software behind &lt;a href="https://en.wikipedia.org/wiki/Wikipedia"&gt;Wikipedia&lt;/a&gt;
        and &lt;a href="https://wikiapiary.com/wiki/Main_Page"&gt;many other wikis&lt;/a&gt;,
        allows visitors to copy a ‚Äúpermanent link‚Äù (or ‚Äúpermalink‚Äù) of the article they are currently viewing.
      &lt;/p&gt;
&lt;p&gt;
        As &lt;a href="https://en.wikipedia.org/wiki/Help:Permanent_link"&gt;English Wikipedia‚Äôs help page on permanent links&lt;/a&gt; notes,
        these links aren‚Äôt fully ‚Äúpermanent‚Äù:
        visiting these links later is not guaranteed to show the exact same content.
        I thought it would be useful to list some of the different ways in which differences can appear.
      &lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;
          Please note that I‚Äôm mainly focusing on Wikimedia wikis here,
          and for examples will often refer to Wikipedias in particular;
          many of these issues will also affect other MediaWiki sites,
          but there are probably additional ways in which third-party wikis can have permalinks‚Äô contents change
          (e.g. Fandom / Wikia has tons of custom extensions),
          and I‚Äôm generally not super interested in those.
          (But if I forgot something relevant to Wikimedia or standard MediaWiki,
          let me know and I might edit it in.)
        &lt;/p&gt;
&lt;/aside&gt;
&lt;h2&gt;What a permalink is&lt;/h2&gt;
&lt;p&gt;
        While the permalink shown in the sidebar (or ‚Äútools‚Äù menu) contains both the &lt;code&gt;title=&lt;/code&gt; and &lt;code&gt;oldid=&lt;/code&gt; URL parameters
        (example: &lt;a href="https://en.wikipedia.org/w/index.php?title=Wikimedia_Commons&amp;amp;oldid=1185477778"&gt;https://en.wikipedia.org/w/index.php?title=Wikimedia_Commons&amp;amp;oldid=1185477778&lt;/a&gt;),
        only the &lt;code&gt;oldid=&lt;/code&gt; is actually required
        (equivalent example: &lt;a href="https://en.wikipedia.org/w/index.php?oldid=1185477778"&gt;https://en.wikipedia.org/w/index.php?oldid=1185477778&lt;/a&gt;).
        The value of this parameter is the revision ID of a page,
        and it tells MediaWiki to use the content of this revision of that page instead of its latest revision.
        For normal wiki articles, this content is the wikitext (the source code of the article),
        which is then rendered and shown to the visitor;
        you can also see the content unrendered by adding &lt;code&gt;&amp;amp;action=raw&lt;/code&gt; to the URL
        (&lt;a href="https://en.wikipedia.org/w/index.php?oldid=1185477778&amp;amp;action=raw"&gt;example&lt;/a&gt;).
      &lt;/p&gt;
&lt;h2&gt;Changes in on-wiki content&lt;/h2&gt;
&lt;p&gt;
        Let‚Äôs start with the biggest one.
        Visiting a permalink only loads the content of the page itself as of the revision specified in the URL.
        Any other &lt;a href="https://en.wikipedia.org/wiki/Help:Template"&gt;templates&lt;/a&gt;,
        &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Lua"&gt;Lua/Scribunto modules&lt;/a&gt;,
        or &lt;a href="https://en.wikipedia.org/wiki/Help:Transclusion"&gt;other transcluded pages&lt;/a&gt;
        are loaded, parsed / evaluated and shown using their latest revision,
        not whatever was their latest revision when the permalink‚Äôs revision was created.
        Templates may look and behave very differently from what they used to do;
        their parameters also may or may not be compatible with the template invocation in the old revision,
        depending on how the community edited the templates.
      &lt;/p&gt;
&lt;p&gt;
        In fact, it‚Äôs not even guaranteed that the page will show the same templates at all.
        Templates are looked up by their name according to the old revision‚Äôs wikitext,
        but templates can be deleted, recreated, or renamed.
        For instance, several wikis now have templates like &lt;code&gt;{{Q|Q123}}&lt;/code&gt; and/or &lt;code&gt;{{P|P123}}&lt;/code&gt;
        to show Wikidata items and/or properties;
        but in the past, ‚Äú&lt;code&gt;Q&lt;/code&gt;‚Äù or ‚Äú&lt;code&gt;P&lt;/code&gt;‚Äù may have referred to different templates that were later deleted,
        as e.g. on &lt;a href="https://eo.wikipedia.org/wiki/Specialaƒµo:Protokolo?page=≈úablono%3AP"&gt;Esperanto&lt;/a&gt;,
        &lt;a href="https://zh.wikipedia.org/wiki/Special:%E6%97%A5%E5%BF%97?page=Template%3AP"&gt;Chinese&lt;/a&gt; or
        &lt;a href="https://es.wikipedia.org/wiki/Especial:Registro?page=Plantilla%3AQ"&gt;Spanish&lt;/a&gt; Wikipedia.
        (These are conveniently short names, after all!
        On English Wikipedia, &lt;code&gt;{{&lt;a href="https://en.wikipedia.org/wiki/Template:P"&gt;P&lt;/a&gt;}}&lt;/code&gt; is still a smiley üôÇ)
      &lt;/p&gt;
&lt;p&gt;
        A more niche phenomenon is redlinks (h/t &lt;a href="https://mamot.fr/@pintoch/112953410745774438"&gt;Antonin Delpeuch&lt;/a&gt; for this one).
        MediaWiki shows internal links to existing pages in blue, and links to pages that don‚Äôt exist in red;
        but when rendering a permalink, this refers to whether the page currently exists,
        not whether it used to exist when the old revision was saved.
        (You can actually see this in the &lt;a href="https://en.wikipedia.org/w/index.php?oldid=1185477778"&gt;example permalink from earlier&lt;/a&gt;,
        where a ‚Äúnot to be confused with‚Äù &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Hatnote"&gt;hatnote&lt;/a&gt; points to a redlink that was evidently deleted in the meantime.)
      &lt;/p&gt;
&lt;p&gt;
        Articles may also be affected by changes in the wiki‚Äôs default interface &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Common.js_and_common.css"&gt;JavaScript and CSS&lt;/a&gt;
        and default &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Gadget"&gt;gadgets&lt;/a&gt;,
        which may interact with page contents.
        For example, styles for frequently used templates are sometimes moved into &lt;code&gt;common.css&lt;/code&gt; (or out of it),
        and some templates may rely on gadgets for interactive functionality
        (like ‚Äì CW for some medical imagery in the next link ‚Äì Wikimedia Commons‚Äô &lt;a href="https://commons.wikimedia.org/wiki/Template:Imagestack"&gt;Imagestack&lt;/a&gt;).
        As with templates, it‚Äôs ultimately up to the community whether changes here are backwards compatible or not.
      &lt;/p&gt;
&lt;h2&gt;Changes in content on other wikis&lt;/h2&gt;
&lt;p&gt;
        Articles can also use content from other wikis,
        the most prominent example being Wikimedia Commons images
        (which, thanks to &lt;a href="https://www.mediawiki.org/wiki/InstantCommons"&gt;InstantCommons&lt;/a&gt;,
        are used not only on Wikimedia wikis but also &lt;em&gt;many&lt;/em&gt; other wikis using MediaWiki).
        A permalink will show the latest version of an image on Commons,
        which is not necessarily the same version as was shown when the old revision was saved ‚Äì
        although, due to Commons‚Äô &lt;a href="https://commons.wikimedia.org/w/index.php?title=Commons:Don%27t_be_bold&amp;amp;rdfrom=commons:Commons:Be_bold"&gt;don‚Äôt be bold&lt;/a&gt; policy,
        the differences should usually be minor
        (e.g. a higher-quality version or a slightly improved crop).
      &lt;/p&gt;
&lt;p&gt;
        The image on Commons may also have been deleted in the meantime,
        e.g. because it turned out to be a copyright violation.
        In this case, the permalink will show the image as a redlink.
      &lt;/p&gt;
&lt;p&gt;
        There are also other ways for wikis to refer to Commons.
        Prior to its &lt;a href="https://phabricator.wikimedia.org/T334940"&gt;undeployment due to security issues&lt;/a&gt;,
        the Graph extension could load data from the Data: namespace on Commons,
        and show it e.g. as a line chart.
      &lt;/p&gt;
&lt;p&gt;
        And then there‚Äôs &lt;a href="https://en.wikipedia.org/wiki/Wikidata"&gt;Wikidata&lt;/a&gt;.
        Wikipedia editors can, at their discretion, make an article read information from Wikidata;
        this has a number of benefits,
        but is also another case where visible parts of an article aren‚Äôt part of the article‚Äôs source code
        and viewing old revisions will still pull the latest version from the referenced place.
      &lt;/p&gt;
&lt;h2&gt;Changes in the software&lt;/h2&gt;
&lt;p&gt;
        Finally, the software which actually renders the old revision‚Äôs content is also subject to changes.
        MediaWiki sees roughly two thousand code changes per release, &lt;!-- git log --oneline --grep='Update git submodules\|Localisation updates\|^Merge' --invert-grep gerrit/REL1_41..gerrit/REL1_42 | wc -l # repeat for a few older REL branch pairs --&gt;
        and any of them might affect the way an article looks.
        While the parser is developed fairly conservatively
        (as nobody wants to break millions of existing pages all at once),
        there are sometimes breaking changes to it;
        many of them may be preceded by on-wiki fixes to avoid the breakage
        (e.g. using the &lt;a href="https://en.wikipedia.org/wiki/Wikipedia:Linter"&gt;Linter&lt;/a&gt; to locate problematic constructs whose behavior will change in future),
        but this doesn‚Äôt help when looking at old revisions.
      &lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;
          (Side note: Because the parser always produces &lt;em&gt;some&lt;/em&gt; output HTML,
          and never returns an error like ‚Äúinvalid input wikitext‚Äù,
          arguably any change to its output is a breaking change.
          After all, even if some new wikitext syntax is intentionally introduced,
          that syntax will previously have rendered in a different way,
          and it‚Äôs theoretically possible that someone used that syntax and relies on its previous behavior.
          This is also something that irritates me about Markdown ‚Äúflavors‚Äù
          that describe themselves as ‚Äúcompatible with‚Äù or ‚Äústrict supersets of‚Äù CommonMark.)
        &lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;
        Also, similar to the earlier point about the wiki‚Äôs default CSS and JS,
        the old revision may also have relied on CSS or JS included in MediaWiki, which is subject to change.
        For example, many articles rely on &lt;a href="https://www.mediawiki.org/wiki/Manual:Collapsible_elements"&gt;collapsible elements&lt;/a&gt;
        (which is an intentional feature offered by MediaWiki which has stayed very stable so far),
        and many pages (help and project pages more so than articles, I believe)
        rely or relied on styles from the OOUI or MediaWiki UI interface libraries,
        a practice that is &lt;a href="https://phabricator.wikimedia.org/T360010"&gt;increasingly discouraged&lt;/a&gt;
        as these libraries are being phased out in favor of Codex
        (though &lt;a href="https://phabricator.wikimedia.org/T355242"&gt;the replacement is not yet clear&lt;/a&gt;).
      &lt;/p&gt;
&lt;h2&gt;Now what?&lt;/h2&gt;
&lt;p&gt;
        If you want to create a new link to some wiki content as you currently see it:
        you can use a permalink as offered by MediaWiki (it‚Äôs a pretty ‚Äúlightweight‚Äù solution),
        but if you want to be absolutely sure that everyone else will see the same content,
        I believe the only way to do that and avoid all the issues here
        is to grab a snapshot of the &lt;em&gt;rendered&lt;/em&gt; wiki content and distribute that.
        You can do this via a trusted intermediary,
        such as the &lt;a href="https://en.wikipedia.org/wiki/Internet_Archive"&gt;Internet Archive&lt;/a&gt;‚Äôs &lt;a href="https://en.wikipedia.org/wiki/Wayback_Machine"&gt;Wayback Machine&lt;/a&gt;,
        or you can save the page yourself.
      &lt;/p&gt;
&lt;p&gt;
        If you‚Äôre looking at a permalink that you found somewhere else,
        I think it‚Äôs worth keeping in mind that there are some caveats to it,
        but 99% of the time it‚Äôs fine ‚Äì
        in practice, I think most of the issues listed here are more theoretical than practical concerns.
        If you really want to be sure you‚Äôre seeing a page as it originally appeared,
        you can try to find a snapshot on the Wayback Machine or another web archiving site.
      &lt;/p&gt;
&lt;p&gt;
        There is also a proposal for a &lt;a href="https://www.mediawiki.org/wiki/User:Ainali/Wiki_Timeslicer"&gt;Wiki Timeslicer&lt;/a&gt; tool which would bypass some of these problems.
        (Personally, I‚Äôm skeptical how feasible it is, to be honest.
        But it probably is possible to improve on MediaWiki‚Äôs own functionality, at least.)
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2024/08/14/mediawiki-permalinks/</guid><pubDate>Wed, 14 Aug 2024 00:00:00 GMT</pubDate></item><item><title>Wikimedia Hackathon 2024 recap</title><link>https://lucaswerkmeister.de/posts/2024/05/15/wikimedia-hackathon-2024/</link><description>&lt;article&gt;

&lt;p&gt;
        The &lt;a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Wikimedia_Hackathon_2024"&gt;Wikimedia Hackathon 2024&lt;/a&gt;
        took place from May 3 to 5 in Tallinn, Estonia,
        and like &lt;a href="https://lucaswerkmeister.de/posts/2023/06/03/wikimedia-hackathon-2023/"&gt;last year&lt;/a&gt; I was one of the participants
        and want to write a recap blog post.
      &lt;/p&gt;
&lt;h2&gt;Major projects&lt;/h2&gt;
&lt;p&gt;
        I came to the Hackathon with two ‚Äúmajor‚Äù ideas for things to work on this year,
        and switched between both of them frequently
        (one on the work laptop, one on the private laptop).
        I think this worked well for me:
        if I got stuck on something in one project,
        or had to wait for someone else to react / respond,
        I could switch to the other project and continue working there.
      &lt;/p&gt;
&lt;p&gt;
        The first project was &lt;a href="https://phabricator.wikimedia.org/T231755"&gt;T231755: Local language name should be translatable in translatewiki.net&lt;/a&gt;.
        The cldr extension contains many language names in PHP files,
        and while they‚Äôre theoretically open to contributions,
        it‚Äôs difficult for volunteers to suggest changes to those files
        (they have to find their way around Git and Gerrit).
        It would be much more convenient if they were defined as i18n messages
        that could be translated on &lt;a href="https://translatewiki.net/"&gt;translatewiki.net&lt;/a&gt; instead.
        Progress on this project mainly consisted of discussing things with other people;
        I also wrote some code to explore the existing data (which wasn‚Äôt merged),
        and uploaded or reviewed some adjacent cldr patches.
        I hope to be able to continue working on this project later.
      &lt;/p&gt;
&lt;p&gt;
        The second project, &lt;a href="https://phabricator.wikimedia.org/T363626"&gt;T363626: Make Wikidata Image Positions tool translatable on translatewiki.net&lt;/a&gt;,
        saw more tangible progress (in fact it‚Äôs mostly done).
        I had already been working on extracting some i18n code from my Wikidata Lexeme Forms tool,
        which has been translatable for a while,
        into a library that other tools can use as well;
        during the Hackathon I made enough progress that the Wikidata Image Positions tool can now use this code as well.
        (It‚Äôs not a real library yet, I still need to finish that.)
        The first set of translations in about half a dozen languages
        was already exported from translatewiki.net and deployed on Toolforge during the Hackathon,
        which was great; since then, even more translations have come in.
      &lt;/p&gt;
&lt;h2&gt;Minor projects&lt;/h2&gt;
&lt;p&gt;
        I helped Amir Aharoni write two Wikidata Lexeme Forms templates for Hebrew verbs,
        and deployed them to the tool
        (&lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-paal/"&gt;pa'al&lt;/a&gt;,
        &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-nifal/"&gt;nif'al&lt;/a&gt;).
        Since then, we‚Äôve brought the total number to seven,
        adding &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-piel/"&gt;pi'el&lt;/a&gt;,
        &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-pual/"&gt;pu'al&lt;/a&gt;,
        &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-hifil/"&gt;hif'il&lt;/a&gt;,
        &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-hufal/"&gt;huf'al&lt;/a&gt;,
        and &lt;a href="https://lexeme-forms.toolforge.org/template/hebrew-verb-hitpael/"&gt;hitpa'el&lt;/a&gt;.
      &lt;/p&gt;
&lt;p&gt;
        I fulfilled two edit requests by other Hackathon participants for gadgets on Wikimedia Commons:
        one &lt;a href="https://commons.wikimedia.org/wiki/MediaWiki_talk:Gadget-Stockphoto.js#Some_updates"&gt;for Gadget-Stockphoto&lt;/a&gt;
        and one &lt;a href="https://commons.wikimedia.org/wiki/MediaWiki_talk:Gadget-purgetab.js#Translated_label"&gt;for Gadget-purgetab&lt;/a&gt;.
      &lt;/p&gt;
&lt;p&gt;
        There were probably some other minor projects as well,
        but I don‚Äôt remember them anymore ^^
      &lt;/p&gt;
&lt;h2&gt;Social things&lt;/h2&gt;
&lt;p&gt;
        This is really the most important part of the hackathon ‚Äì
        talking to people, meeting folks you‚Äôve never seen in person before,
        hearing what‚Äôs going on in their lives, discussing upcoming projects,
        all sorts of fun stuff.
        I don‚Äôt really know what to write about it here, though.
      &lt;/p&gt;
&lt;p&gt;
        One particular social event was the &lt;a href="https://phabricator.wikimedia.org/T363870"&gt;Wikimedia Cuteness Association meetup&lt;/a&gt;:
        several people who had brought plushies, cute companions or similar things to the Hackathon
        met up in one of the rooms and took some group photos
        (&lt;a href="https://commons.wikimedia.org/wiki/Category:Wikimedia_Cuteness_Association_at_Wikimedia_Hackathon_2024"&gt;Commons category&lt;/a&gt;).
        It didn‚Äôt take very long, but I‚Äôm glad we did it :)
      &lt;/p&gt;
&lt;p&gt;
        Another social event was &lt;a href="https://phabricator.wikimedia.org/T364009"&gt;Juggling, Rubik‚Äôs cubes and other physical fun&lt;/a&gt;,
        continuing a tradition from 2019 and 2023.
        I couldn‚Äôt really explain to you why juggling and cubing fits together,
        but it seems to work alright as a fun hour to hang out ^^
      &lt;/p&gt;
&lt;h2&gt;Travel&lt;/h2&gt;
&lt;p&gt;
        I‚Äôm very happy that this year
        I was able to travel to and from the Hackathon without flying;
        I took an overnight train from Berlin to Stockholm
        (fun fact: in 2019, for Wikimania, just getting to Stockholm by train took over 24¬†hours with six changeovers)
        and an overnight ferry from Stockholm to Tallinn (Tuesday evening to Thursday morning)
        and then the reverse on the way back (Monday evening to Wednesday morning).
        As usual, I wrote about my travel in &lt;a href="https://wikis.world/@LucasWerkmeister/112361884408412586"&gt;a Mastodon thread&lt;/a&gt;
        (only one long thread for travel there + Hackathon + travel back this time).
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2024/05/15/wikimedia-hackathon-2024/</guid><pubDate>Wed, 15 May 2024 00:00:00 GMT</pubDate></item><item><title>Wikimedia Hackathon 2023 recap</title><link>https://lucaswerkmeister.de/posts/2023/06/03/wikimedia-hackathon-2023/</link><description>&lt;article&gt;

&lt;p&gt;
        Two weeks ago, I participated in the &lt;a href="https://www.mediawiki.org/wiki/Wikimedia_Hackathon_2023"&gt;Wikimedia Hackathon 2023&lt;/a&gt;.
        I had a wonderful time, and in this blog post I‚Äôm trying to capture some of the experience.
      &lt;/p&gt;
&lt;p&gt;
        As is usual for me, the hackathon went fairly haphazardly:
        I had come with some vague ideas for topics I could potentially work on,
        which I didn‚Äôt end up touching in the slightest,
        and instead interacted with lots of people and did various larger and smaller things along the way.
        I like it this way, but it means you‚Äôll just have to live with this blog post not having a lot of structure :)
      &lt;/p&gt;
&lt;p&gt;
        One of my first achievements was to get a Gerrit change merged:
        I had uploaded &lt;a href="https://gerrit.wikimedia.org/r/c/mediawiki/core/+/919386"&gt;Add &lt;code&gt;Authorization&lt;/code&gt; to default &lt;code&gt;$wgAllowedCorsHeaders&lt;/code&gt;&lt;/a&gt; the previous week,
        and found some people at the hackathon to review it:
        &lt;a href="https://en.wikipedia.org/wiki/User:Reedy"&gt;Reedy&lt;/a&gt; and &lt;a href="https://www.mediawiki.org/wiki/User:Legoktm"&gt;Legoktm&lt;/a&gt;.
        The intention here was to make it possible to have purely client-side (in-browser) web apps
        that interact with Wikimedia wikis using OAuth 2.0 (e.g. making edits),
        which requires making CORS-enabled authenticated requests.
        Unfortunately, this still doesn‚Äôt work;
        in addition to the Gerrit change mentioned above,
        we probably need to tweak the way the API processes the &lt;code&gt;origin&lt;/code&gt; parameter a little bit ‚Äì
        I‚Äôll keep looking into &lt;a href="https://phabricator.wikimedia.org/T322944"&gt;this issue&lt;/a&gt;.
        (You can find the &lt;a href="https://github.com/lucaswerkmeister/m3api-examples/tree/main/webapp-clientside-vite-guestbook"&gt;example web app&lt;/a&gt; I‚Äôm trying to make work on GitHub already.)
      &lt;/p&gt;
&lt;p&gt;
        This interaction also had an unexpected additional outcome.
        Both Reedy and Legoktm were reviewing the change in person, not from their own laptops,
        so Legoktm wanted to +2 it from my account ‚Äì but my volunteer account didn‚Äôt have +2 rights yet.
        He suggested / asked that I make a request to get those rights, which I did,
        and &lt;a href="https://phabricator.wikimedia.org/T337014"&gt;+2 in mediawiki/ for Lucas Werkmeister [volunteer]&lt;/a&gt; quickly started to rack up support tokens.
        A week and a half later, Taavi made the change, so I can now merge MediaWiki changes as volunteer \o/
      &lt;/p&gt;
&lt;p&gt;
        Another thing I did was play with the new Toolforge build service, or build packs beta (&lt;a href="https://phabricator.wikimedia.org/T337040"&gt;T337040&lt;/a&gt;).
        This is a promising new way to deploy Toolforge tools, in a way that doesn‚Äôt rely on the shared NFS file system, &lt;!-- no, this isn‚Äôt RAS syndrome. it‚Äôs a particular instance of the file system using the NFS technology --&gt;
        and with more flexibility for developers.
        (The main reason I‚Äôm interested in it is that it should let me finally move the
        &lt;a href="https://wd-shex-infer.toolforge.org/"&gt;Wikidata Shape Expressions Inference tool&lt;/a&gt; away from the Grid Engine,
        but that will require support for multiple languages in the same image first,
        which the build service doesn‚Äôt have yet.)
        I made a &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/lucaswerkmeister-wmde-test"&gt;simple Python/Flask tool&lt;/a&gt;
        and then experimented with how to move it to the build service without losing the configuration file;
        I also filed some related bugs and updated the documentation along the way.
        The &lt;a href="https://phabricator.wikimedia.org/T336055"&gt;build service session&lt;/a&gt; later at the hackathon was also very interesting.
        (At that session, I realized that some of my earlier documentation edits might have been a bit misguided:
        I was working under the assumption that you‚Äôd still have the tool‚Äôs source code cloned in &lt;code&gt;~/www/python/src/&lt;/code&gt;,
        only realizing at the session on Sunday that a tool that‚Äôs fully migrated to build packs doesn‚Äôt really need this at all ‚Äì
        the source code is cloned from version control at image build time, it doesn‚Äôt need to exist on NFS at runtime ‚Äì
        so the config file should maybe be somewhere else, e.g. directly in the tool‚Äôs home directory.)
      &lt;/p&gt;
&lt;p&gt;
        I also unexpectedly worked on two issues where Wikibase was broken:
        &lt;a href="https://phabricator.wikimedia.org/T336956"&gt;the mobile version of Wikidata was unintentionally loading desktop-only modules&lt;/a&gt;,
        and &lt;a href="https://phabricator.wikimedia.org/T337081"&gt;interlanguage links couldn‚Äôt be added from client wikis&lt;/a&gt;.
      &lt;/p&gt;
&lt;p&gt;
        I contributed some very minor fixes to tools where I noticed tiny issues as they were mentioned in sessions:
        &lt;a href="https://phabricator.wikimedia.org/T337118"&gt;Toolhub had some HTTP links&lt;/a&gt;,
        and &lt;a href="https://gitlab.wikimedia.org/toolforge-repos/versions/-/merge_requests/3"&gt;Versions was linking to its source code in the wrong place&lt;/a&gt;.
      &lt;/p&gt;
&lt;p&gt;
        I held two presentations:
        &lt;a href="https://phabricator.wikimedia.org/T331276"&gt;Cool new things in MediaWiki code&lt;/a&gt;
        and &lt;a href="https://phabricator.wikimedia.org/T331275"&gt;Cool new things in PHP&lt;/a&gt;.
        In both cases, the idea is basically that, as a developer working on MediaWiki code,
        you might have missed some of the cool things that happened recently,
        so here‚Äôs a summary to catch you up.
        I designed the slides
        (&lt;a href="https://upload.wikimedia.org/wikipedia/commons/5/54/Cool_new_things_in_MediaWiki_code_%E2%80%93_Wikimedia_Hackathon_2023.pdf"&gt;MediaWiki&lt;/a&gt;,
        &lt;a href="https://upload.wikimedia.org/wikipedia/commons/b/b1/Cool_new_things_in_PHP_%E2%80%93_Wikimedia_Hackathon_2023.pdf"&gt;PHP&lt;/a&gt;)
        so that they‚Äôre useful on their own
        (with additional slides to summarize what I was saying on the day),
        so feel free to take a look :)
      &lt;/p&gt;
&lt;p&gt;
        (Side note on the presentations:
        I had thought about doing a practice run before the first presentation, but decided against it.
        It turned out that it probably would‚Äôve helped a lot ‚Äì
        I talked way too fast and was done in half the time I had been given, which was quite unfortunate.
        I did a few practice runs for the second presentation and that one went much better.)
      &lt;/p&gt;
&lt;p&gt;
        (Second side note: given that we recently &lt;a href="https://phabricator.wikimedia.org/T178356"&gt;raised the JS syntax requirement from ES5 to ES6&lt;/a&gt;,
        I‚Äôd really love to have a similar presentation or overview of all the new things we can now use in JS:
        I know a lot of the features, but I don‚Äôt know which can be used now (e.g. &lt;code&gt;class&lt;/code&gt; syntax)
        and which still can‚Äôt be used (e.g. &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;).
        But as far as I know, nobody‚Äôs put anything like this together yet.)
      &lt;p&gt;
        Of course, a huge part of the hackathon is meeting and getting to know people
        (whether it‚Äôs people I‚Äôve met before, people I‚Äôve only interacted with online but never met in person, or people I didn‚Äôt know at all),
        but I don‚Äôt know how to put that into this blog post:
        if I started to list them, I‚Äôd worry about forgetting anyone.
        One thing I can mention, because it was closer to a planned session than just a random hallway meetup,
        is that I sat together with &lt;a href="https://en.wikipedia.org/wiki/User:Novem_Linguae"&gt;Novem Linguae&lt;/a&gt; and &lt;a href="https://meta.wikimedia.org/wiki/User:Gopavasanth"&gt;Gopa Vasanth&lt;/a&gt;
        to play with some Rubik‚Äôs cubes and juggling equipment.
        Otherwise, please know that if we talked at the hackathon, I was very happy to meet you!
      &lt;/p&gt;
&lt;p&gt;
        Towards the end of the hackathon,
        because the topic of Kubernetes probes on Toolforge had been mentioned in a session,
        I started to work again on a project I‚Äôd tried to do a few years ago already:
        &lt;a href="https://phabricator.wikimedia.org/T337182"&gt;make &lt;code&gt;webservice restart&lt;/code&gt; do a graceful restart&lt;/a&gt;.
        My &lt;a href="https://gerrit.wikimedia.org/r/c/operations/software/tools-webservice/+/721989/"&gt;previous patch for this&lt;/a&gt;
        had been rejected due to excessive complexity,
        and the underlying code had also changed in the meantime,
        so I tried to find a new approach to implement the same overall behavior.
        Happily, my &lt;a href="https://gerrit.wikimedia.org/r/c/operations/software/tools-webservice/+/921620/"&gt;new implementation&lt;/a&gt;
        let us remove a lot more code than was added,
        and was merged soon afterwards;
        once it‚Äôs deployed on Toolforge,
        I can finally go back from running &lt;code&gt;kubectl rollout restart deployment &lt;var&gt;lexeme-forms&lt;/var&gt;&lt;/code&gt; to just &lt;code&gt;webservice restart&lt;/code&gt;.
      &lt;/p&gt;
&lt;p&gt;
        I‚Äôve also &lt;a href="https://wikis.world/@LucasWerkmeister/110317538243683824"&gt;posted extensively on Mastodon&lt;/a&gt;
        about my travel surrounding the hackathon, if you‚Äôre interested in that.
        (You can click the little ‚Äúeye‚Äù icon in the upper right corner to expand all the content warnings.
        Note that Mastodon is apparently not always loading the full thread,
        so you might have to click on the ‚Äúlast‚Äù post a few times to load more.
        The thread isn‚Äôt over until you reach the &lt;a href="https://wikis.world/@LucasWerkmeister/110426553321621250"&gt;recap posts&lt;/a&gt;.)
        Otherwise, I think that‚Äôs it!
      &lt;/p&gt;

&lt;/p&gt;&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2023/06/03/wikimedia-hackathon-2023/</guid><pubDate>Sat, 03 Jun 2023 00:00:00 GMT</pubDate></item><item><title>MediaWiki Lua for non-Lua programmers</title><link>https://lucaswerkmeister.de/posts/2022/03/20/mw-lua-for-non-lua-programmers/</link><description>&lt;article&gt;

&lt;p&gt;
        This is a blog post to ‚Äúonboard‚Äù people to Lua programming for MediaWiki
        (e.g. on Wikipedias or Wikimedia Commons).
        The target audience is people who already know some programming,
        but aren‚Äôt very familiar with Lua specifically.
        The goal is not that you‚Äôll be a professional Lua programmer,
        but that you‚Äôll be aware of some of the more important aspects,
        and be able to write some useful Lua code with a good portion of trial-and-error and some googling.
        I‚Äôll be comparing Lua to several other programming languages,
        in the hope that you‚Äôre familiar enough with at least some of them to understand what I mean.
      &lt;/p&gt;
&lt;h2&gt;Some syntax&lt;/h2&gt;
&lt;p&gt;
        No semicolons.
        No braces ‚Äì blocks are usually introduced by a relevant keyword
        (e.g. &lt;code&gt;function name(args)&lt;/code&gt;, &lt;code&gt;if cond then&lt;/code&gt;)
        and always end with the keyword &lt;code&gt;end&lt;/code&gt;.
        Strings concatenate with &lt;code class="example"&gt;..&lt;/code&gt;,
        not &lt;code class="counterexample"&gt;.&lt;/code&gt; like in PHP/Perl or &lt;code class="counterexample"&gt;+&lt;/code&gt; like in Java(Script)/Python.
        The not-equal operator is &lt;code class="example"&gt;~=&lt;/code&gt;,
        not &lt;code class="counterexample"&gt;!=&lt;/code&gt; like in most other languages.
        Comments begin with &lt;code class="example"&gt;--&lt;/code&gt;, like in Haskell;
        &lt;code class="counterexample"&gt;#&lt;/code&gt; (PHP, Perl, Python) is the length operator instead,
        &lt;code class="counterexample"&gt;//&lt;/code&gt; and &lt;code class="counterexample"&gt;/* */&lt;/code&gt; (C, C++, Java, JS) are syntax errors.
      &lt;/p&gt;
&lt;p&gt;
        Local variables are declared with the keyword &lt;code&gt;local&lt;/code&gt;,
        otherwise all variables are global (even inside a function!) ‚Äì
        in other words, you‚Äôll want to write &lt;code&gt;local&lt;/code&gt; a lot of the time.
        (If you test your module using &lt;a href="https://en.wikipedia.org/wiki/Module:ScribuntoUnit"&gt;ScribuntoUnit&lt;/a&gt;,
        it will yell at you if you forgot a &lt;code&gt;local&lt;/code&gt; somewhere and accidentally leaked a global variable.)
      &lt;/p&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;
&lt;strong&gt;Tables&lt;/strong&gt; are a fairly fundamental data structure in Lua.
        They‚Äôre similar to arrays in PHP,
        in that they‚Äôre a single data structure that fulfills two purposes which many other languages have as separate data structures:
        &lt;strong&gt;lists&lt;/strong&gt;/arrays/vectors, and &lt;strong&gt;maps&lt;/strong&gt;/dictionaries/hashes.
        In Lua as in PHP, a list is just a map with sequential integer keys;
        unlike in PHP and most other languages, though, &lt;strong&gt;list indexes start from 1&lt;/strong&gt;, not 0.
        (Nothing stops you from using 0 as an index manually, but it will make everything more confusing.
        The syntax &lt;code&gt;{ "first", "last" }&lt;/code&gt; creates a table using indexes 1 and 2, not 0 and 1.)
      &lt;/p&gt;
&lt;p&gt;
        Unlike in JavaScript and PHP, and more like in Python and some other languages,
        table keys (indexes) are not limited to strings or numbers:
        any other value, including a table, can be used as a key.
        That said, numbers and strings are more common, and strings have shortcut syntax:
        &lt;code&gt;someTable.someKey&lt;/code&gt; is equivalent to &lt;code&gt;someTable["someKey"]&lt;/code&gt;.
      &lt;/p&gt;
&lt;p&gt;
        Tables also fulfill the role of &lt;strong&gt;objects&lt;/strong&gt;,
        including methods, which we‚Äôll talk about later.
        There‚Äôs no special syntax to define classes or create instances of a class.
        There are ‚Äúmetatables‚Äù, which can customize various behavior of a table,
        kind of like the prototype of an object in JavaScript,
        but I‚Äôll just mention that here and let you look it up if you think you need it,
        since I don‚Äôt think it usually comes up in normal module programming.
      &lt;/p&gt;
&lt;p&gt;Here‚Äôs an example table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;local&lt;/span&gt; someTable &lt;span class="keyword operator"&gt;=&lt;/span&gt; {
    &lt;span class="comment"&gt;-- normalKey: "normalValue" in JavaScript,&lt;/span&gt;
    &lt;span class="comment"&gt;-- i.e. uses the string "normalKey" as the key&lt;/span&gt;
    normalKey &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="string"&gt;"normalValue"&lt;/span&gt;,
    &lt;span class="comment"&gt;-- "otherKey": "otherValue" in Python&lt;/span&gt;
    &lt;span class="comment"&gt;-- [ "otherKey" ]: "otherValue" in JavaScript&lt;/span&gt;
    &lt;span class="comment"&gt;-- ("otherKey" can be any expression)&lt;/span&gt;
    [ &lt;span class="string"&gt;"otherKey"&lt;/span&gt; ] &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="string"&gt;"otherValue"&lt;/span&gt;,
    &lt;span class="comment"&gt;-- [ "a", "b", "c" ] in Python, JavaScript, etc.&lt;/span&gt;
    &lt;span class="string"&gt;"a"&lt;/span&gt;, &lt;span class="string"&gt;"b"&lt;/span&gt;, &lt;span class="string"&gt;"c"&lt;/span&gt;, &lt;span class="comment"&gt;-- implicit indexes 1, 2, 3&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        For more information on tables, including a longer syntax example (scroll down a bit),
        see the &lt;a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:Scribunto/Lua_reference_manual#table"&gt;Scribunto Lua reference manual ¬ß table&lt;/a&gt;.
      &lt;/p&gt;
&lt;h2&gt;nil&lt;/h2&gt;
&lt;p&gt;
&lt;code&gt;nil&lt;/code&gt; is Lua‚Äôs version of ‚Äúnull/none/nothing‚Äù. (Like in Lisp!)
        For example, it‚Äôs what you get when accessing a table key that doesn‚Äôt exist.
        (Incidentally, there‚Äôs actually no syntax to delete a table entry ‚Äì
        you just set it to &lt;code&gt;nil&lt;/code&gt; instead: &lt;code&gt;someTable.someKey = nil&lt;/code&gt;.)
      &lt;/p&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;
        Unlike in most other languages, &lt;strong&gt;functions can return multiple values&lt;/strong&gt;.
        A function can &lt;code&gt;return "first", "second", "third"&lt;/code&gt;,
        and a caller can assign &lt;code&gt;local a, b, c = someFunction()&lt;/code&gt;,
        and &lt;code&gt;a&lt;/code&gt; will be &lt;code&gt;"first"&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; will be &lt;code&gt;"second"&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; will be &lt;code&gt;"third"&lt;/code&gt;.
        (Yes, you can emulate this in other languages by returning a list, don‚Äôt @ me.)
        If you‚Äôre just writing your own code, you can of course ignore this,
        but you should be aware of it when interacting with other people‚Äôs code,
        and you may also find that it‚Äôs useful for you.
      &lt;/p&gt;
&lt;p&gt;
        If a function returns more values than a caller is interested in, the extra values are dropped.
        This means that you can use this feature to return additional / auxiliary information,
        and callers who aren‚Äôt interested in it can just write &lt;code&gt;local mainResult = yourFunction()&lt;/code&gt;
        and ignore whatever else it happens to return.
        If a function returns &lt;em&gt;fewer&lt;/em&gt; values than a caller asked for ‚Äì
        &lt;code&gt;local first, second, third = functionReturningOneValue()&lt;/code&gt; ‚Äì
        then the other values are set to &lt;code&gt;nil&lt;/code&gt;.
      &lt;/p&gt;
&lt;p&gt;
        You can also define functions in a table,
        in a way that I haven‚Äôt seen in a lot of other languages,
        but actually find very natural and convenient:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="storage function"&gt;function&lt;/span&gt; &lt;span class="entity name function"&gt;someTable.someFunction&lt;/span&gt;() ... &lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is exactly the same as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;someTable.someFunction &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;function&lt;/span&gt;() ... &lt;span class="keyword"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        But nicer to read, since &lt;code&gt;someTable.someFunction()&lt;/code&gt; matches how the function will be called.
        This also leads us nicely into our next topic.
      &lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;
        As we‚Äôve just seen, you can have functions inside a table,
        and call those functions using the &lt;code&gt;.&lt;/code&gt; syntax familiar from many other languages.
        However, these functions don‚Äôt automatically have access to the surrounding table.
        For that, Lua has a mechanism kind of reminiscent of Python,
        in that you‚Äôll use the name &lt;code&gt;self&lt;/code&gt; to identify that surrounding table
        (what many other languages call &lt;code&gt;this&lt;/code&gt;).
        However, you don‚Äôt define &lt;code&gt;self&lt;/code&gt; as the first parameter of the method,
        like you would in Python (&lt;code&gt;def some_method(self, other_param)&lt;/code&gt;);
        instead, &lt;em&gt;you define and call the method with a colon instead of a period&lt;/em&gt;:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="storage function"&gt;function&lt;/span&gt; &lt;span class="entity name function"&gt;someTable:someMethod&lt;/span&gt;(param1, param2)
    &lt;span class="keyword"&gt;return&lt;/span&gt; self.something &lt;span class="keyword operator"&gt;+&lt;/span&gt; param1 &lt;span class="keyword operator"&gt;+&lt;/span&gt; param2
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;local&lt;/span&gt; result &lt;span class="keyword operator"&gt;=&lt;/span&gt; someTable:someMethod(arg1, arg2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is exactly equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="comment"&gt;-- do not write code like this, this is for demonstration only&lt;/span&gt;
&lt;span class="storage function"&gt;function&lt;/span&gt; &lt;span class="entity name function"&gt;someTable.someMethod&lt;/span&gt;(self, param1, param2)
    &lt;span class="keyword"&gt;return&lt;/span&gt; self.something &lt;span class="keyword operator"&gt;+&lt;/span&gt; param1 &lt;span class="keyword operator"&gt;+&lt;/span&gt; param2
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;local&lt;/span&gt; result &lt;span class="keyword operator"&gt;=&lt;/span&gt; someTable.someMethod(someTable, arg1, arg2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
        When defining a method, the colon is syntactic sugar for a first &lt;code&gt;self&lt;/code&gt; parameter;
        when calling it, it‚Äôs syntactic sugar for passing in the table as the first argument.
        (In theory, you can mix and match this,
        and colon-call non-colon-defined methods or vice versa,
        but that will probably just result in confusion.)
        When writing Lua, it‚Äôs important to get into a habit of using table members the right way,
        which is usually indicated in the relevant documentation.
        For instance, &lt;a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:Scribunto/Lua_reference_manual#Frame_object"&gt;frame objects&lt;/a&gt;
        have &lt;code&gt;frame&lt;strong&gt;.&lt;/strong&gt;args&lt;/code&gt; but &lt;code&gt;frame&lt;strong&gt;:&lt;/strong&gt;getParent()&lt;/code&gt; ‚Äì
        the arguments are a normal table member, the parent frame is a method.
        &lt;code class="example"&gt;frame&lt;strong&gt;:&lt;/strong&gt;getParent()&lt;strong&gt;.&lt;/strong&gt;args&lt;/code&gt; correctly gets the parent frame args (assuming there is a parent frame!);
        &lt;code class="counterexample"&gt;frame&lt;strong&gt;.&lt;/strong&gt;getParent()&lt;/code&gt; is wrong,
        and &lt;code class="counterexample"&gt;frame&lt;strong&gt;:&lt;/strong&gt;getParent()&lt;strong&gt;:&lt;/strong&gt;args&lt;/code&gt; is a syntax error.
      &lt;/p&gt;
&lt;h2&gt;Named arguments&lt;/h2&gt;
&lt;p&gt;
        When calling a function with a single table literal argument,
        you can omit the surrounding parentheses:
        &lt;code&gt;func{...}&lt;/code&gt; means the same as &lt;code&gt;func({...})&lt;/code&gt;.
        Some methods in MediaWiki are intended to be called like this,
        emulating named arguments in some other languages:
      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class="keyword"&gt;local&lt;/span&gt; wikitext &lt;span class="keyword operator"&gt;=&lt;/span&gt; frame:expandTemplate{
    title &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="string"&gt;'Some template'&lt;/span&gt;,
    args &lt;span class="keyword operator"&gt;=&lt;/span&gt; {
        &lt;span class="string"&gt;'first'&lt;/span&gt;,
        &lt;span class="string"&gt;'second'&lt;/span&gt;,
        other &lt;span class="keyword operator"&gt;=&lt;/span&gt; &lt;span class="string"&gt;'named'&lt;/span&gt;,
    },
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would be equivalent to &lt;code&gt;{{Some template |first |second |other=named}}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
        This was just an overview of some more noteworthy aspects of Lua.
        For a more thorough introduction,
        including more details on using Lua in MediaWiki specifically,
        see the &lt;a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Extension:Scribunto/Lua_reference_manual"&gt;Scribunto Lua reference manual&lt;/a&gt;:
        it has a lot of information, and is also available in several other languages.
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2022/03/20/mw-lua-for-non-lua-programmers/</guid><pubDate>Sun, 20 Mar 2022 00:00:00 GMT</pubDate></item><item><title>Building a Wikidata Tool ‚Äì Behind the Scenes</title><link>https://lucaswerkmeister.de/posts/2019/01/04/speedpatrolling/</link><description>&lt;article&gt;

&lt;p&gt;
        At &lt;a href="http://www.wikidata.org/entity/Q60178200"&gt;35C3&lt;/a&gt;, I held a one-hour presentation
        (&lt;a href="https://cfp.verschwoerhaus.de/35c3/talk/XRQNHR/"&gt;talk page&lt;/a&gt;, &lt;a href="https://commons.wikimedia.org/wiki/File:35c3_WikipakaWG_-_Building_a_Wikidata_tool_(eng).webm"&gt;recording&lt;/a&gt;)
        where I built a simple Wikidata tool from scratch and deployed it on Wikimedia Toolforge.
        To avoid giving the impression that I can just churn out tools like it‚Äôs no big deal,
        this blog post describes how I practiced the presentation
        and which problems I encountered at the time
        (so that I wouldn‚Äôt have to encounter them live during the presentation),
        as well as the problems that still occurred during the presentation despite my practice.
      &lt;/p&gt;
&lt;aside&gt;
        The tool isn‚Äôt really in a finished state yet ‚Äì
        as of this writing, I have to clean it up some more before properly announcing it ‚Äì
        but you can already try it out at &lt;a href="https://tools.wmflabs.org/speedpatrolling/"&gt;tools.wmflabs.org/speedpatrolling&lt;/a&gt; if you want.
      &lt;/aside&gt;
&lt;h2&gt;Basic idea&lt;/h2&gt;
&lt;p&gt;
        The general idea for this tool was suggested by &lt;a href="https://twitter.com/Jokrates"&gt;Jonas&lt;/a&gt; during some conversations a while ago:
        while &lt;a href="https://phabricator.wikimedia.org/T95878"&gt;Wikidata‚Äôs mobile interface currently doesn‚Äôt let you edit&lt;/a&gt;,
        and fixing that will probably be a lot of work,
        one way for people to contribute while mobile,
        e.‚ÄØg. on the train to work or in similar situations,
        would be a kind of ‚Äúpatrolling &lt;a href="https://www.wikidata.org/wiki/Special:GoToLinkedPage/enwiki/Q15078152"&gt;Tinder&lt;/a&gt;‚Äù ‚Äì
        swipe right to mark an edit as patrolled,
        swipe left to undo it or roll it back,
        or something like that.
      &lt;/p&gt;
&lt;p&gt;
        Since I don‚Äôt have any experience working with touch devices or gesture inputs,
        I decided to go with three simple buttons for the first version:
        skip an edit (very important ‚Äì never force users to make a contribution just to move forward when they might not understand the current task!),
        mark as patrolled,
        or rollback.
        People without rollback rights would simply not have the option to rollback ‚Äì
        undoing one edit is not very helpful,
        since vandalism often happens in series of edits,
        and I didn‚Äôt want to reimplement rollback functionality for people without proper rollback rights.
        (Also, I couldn‚Äôt use ‚ÄúTinder‚Äù in the name, so it was unimaginatively to be called ‚ÄúSpeedPatrolling‚Äù.)
      &lt;/p&gt;
&lt;p&gt;
        I also asked &lt;a href="https://www.wikidata.org/wiki/User:Lydia_Pintscher_(WMDE)"&gt;Lydia&lt;/a&gt; if she was okay with this idea
        (all this was going to be a private activity, but still,
        I don‚Äôt want to do things that she thinks are a bad idea,
        probably for good reasons that I can‚Äôt think of).
        We looked through the &lt;a href="https://phabricator.wikimedia.org/T90870"&gt;list of self-contained tasks around Wikidata&lt;/a&gt; for something else to do,
        but couldn‚Äôt find much that fit the bill of this presentation
        (Toolforge tool, uses OAuth, can be built in one hour),
        so she said I could go ahead with this project.
      &lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;
        Lots of things changed during the preparation phase.
        I didn‚Äôt keep track of all of them,
        so the following list, recalled from memory, is likely incomplete.
      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
            The first problem arrived as soon as I tried to start working on the tool.
            I was going to use the &lt;a href="https://github.com/lucaswerkmeister/cookiecutter-toolforge"&gt;cookiecutter-toolforge&lt;/a&gt; template to get started with the tool,
            which includes a hook to check that the tool name you provided is actually a legal tool name.
            The hook was originally only compatible with Python 3;
            however, I was going to hold this presentation on my work laptop, which has Ubuntu installed,
            where Cookiecutter is only available for Python 2.
            In order to be able to use the template, I first needed to &lt;a href="https://github.com/lucaswerkmeister/cookiecutter-toolforge/commit/62429fb8c50fb8c889495cb13a47b378cbbd1a5a"&gt;update the hook to support Python 2&lt;/a&gt;.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            When I originally planned the outline of the code I was going to write
            (before I even started actually writing any code),
            I intended to get at least as far as the ‚Äúdiff‚Äù page,
            including the buttons to skip, patrol or rollback an edit,
            before getting started with OAuth.
            However, as soon as I actually started programming the tool
            (first step: get a list of unpatrolled recent changes),
            I noticed that this didn‚Äôt work:
            the information whether an edit is patrolled or not isn‚Äôt public,
            so to even get a list of unpatrolled changes
            you need to make an API request as a user with the &lt;code&gt;patrol&lt;/code&gt; right.
            This meant that I had to move the registration of the OAuth consumer to the very beginning of the presentation,
            just after the introductory remarks and the tool template setup,
            before I could even start to write a single line of code.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            Then, when figuring out how to get a list of unpatrolled changes via the API,
            I found that the values for the &lt;a href="https://www.wikidata.org/w/api.php?action=help&amp;amp;modules=query%2Brecentchanges"&gt;&lt;code&gt;rcshow&lt;/code&gt; parameter&lt;/a&gt; were insufficiently documented;
            specifically, I was unsure whether I needed &lt;code&gt;!patrolled&lt;/code&gt; or &lt;code&gt;unpatrolled&lt;/code&gt; changes,
            and the difference between them wasn‚Äôt documented anywhere
            (&lt;code&gt;unpatrolled&lt;/code&gt; was &lt;a href="https://www.mediawiki.org/wiki/Special:PermanentLink/2985437#Parameters"&gt;completely missing&lt;/a&gt;).
            To understand the relationship between patrolled, autopatrolled and unpatrolled edits,
            I first had to look through the MediaWiki code
            and then tried to &lt;a href="https://www.mediawiki.org/wiki/Special:Diff/3013350"&gt;update the documentation&lt;/a&gt; to the best of my ability.
          &lt;/p&gt;
&lt;p&gt;
            While looking at the code,
            I also found a (very minor) security bug,
            which I reported as &lt;a href="https://phabricator.wikimedia.org/T212118"&gt;T212118&lt;/a&gt;.
            It hasn‚Äôt been fixed yet (and as such is not yet publicly visible),
            but should hopefully be resolved soon.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            When writing the handler for the &lt;code&gt;/diff/&lt;/code&gt; route,
            I originally intended to have it redirect to &lt;code&gt;/diff/&lt;var&gt;id&lt;/var&gt;/&lt;/code&gt;,
            without implementing that route
            (so the browser would display a 404 page after handling the redirect).
            However, Flask‚Äôs &lt;code&gt;url_for()&lt;/code&gt; function requires a function name,
            so to implement the redirect,
            a stub &lt;code&gt;/diff/&lt;var&gt;id&lt;/var&gt;/&lt;/code&gt; is also necessary.
          &lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;
              I also briefly struggled to find good names for these functions,
              since they can‚Äôt very well both be called &lt;code&gt;diff()&lt;/code&gt;,
              even though that‚Äôs the only constant part in both routes.
              In the end I settled on &lt;code&gt;any_diff()&lt;/code&gt; and &lt;code&gt;diff()&lt;/code&gt;.
            &lt;/p&gt;
&lt;/aside&gt;
&lt;/li&gt;
&lt;li id="embed"&gt;
&lt;p&gt;
            My original plan for the ‚Äúdiff‚Äù page was to directly embed the mobile diff page,
            since it‚Äôs a nicely compact representation of the diff, with not too much clutter on the page
            (no sidebar, header bar, etc., which would look weird when embedded on another page).
            However, during the first practice round, I discovered that MediaWiki would not let me do that:
            since I was logged in, and the diff page included a ‚Äúmark as patrolled‚Äù link,
            MediaWiki sent an &lt;code&gt;X-Frame-Options: deny&lt;/code&gt; header to prevent &lt;a href="https://www.wikidata.org/wiki/Special:GoToLinkedPage/enwiki/Q163231"&gt;clickjacking&lt;/a&gt;,
            so the browser only displayed a blank iframe on the tool page.
          &lt;/p&gt;
&lt;p&gt;
            I tried to make embedding the diff page work ‚Äì
            for example, if I could somehow instruct the iframe to load anonymously,
            as in a private window (that is, without cookie headers),
            so that the user would not be logged in and MediaWiki would not prevent the embedding ‚Äì
            but ultimately found no working solution for that.
            Instead, I decided to download the diff page from the tool‚Äôs code (anonymously),
            serve it under a certain route,
            and then embed that page (from my own tool) in the tool‚Äôs full diff page.
            This was implemented using the following Python code:
          &lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;@app.route('/diff/&amp;lt;int:id&amp;gt;/embed')
def diff_embed(id):
    with urllib.request.urlopen('https://m.wikidata.org/wiki/Special:MobileDiff/%d' % id) as r:
        html = r.read().decode('utf-8')
    html = html.replace('"/w/', '"https://m.wikidata.org/w/')
    html = html.replace('"/wiki/', '"https://m.wikidata.org/wiki/')
    return html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
            The two &lt;code&gt;replace()&lt;/code&gt; calls try to turn some relative URLs into absolute ones,
            e.‚ÄØg. in hyperlinks or when loading JavaScript/CSS.
            It‚Äôs a hack, of course, but it more or less worked and would be good enough for the presentation.
            (A proper version of this would presumably better be implemented using the &lt;a href="https://www.wikidata.org/wiki/Special:GoToLinkedPage/enwiki/Q2893296"&gt;Beautiful Soup&lt;/a&gt; library.)
            In the second practice run, I didn‚Äôt even bother embedding Wikidata and went straight for this hack instead;
            however, I afterwards decided that it would be nicer for the presentation to first show the error when embedding Wikidata,
            and then introduce the hack,
            since it looked like there would be enough time for this.
          &lt;/p&gt;
&lt;p&gt;
            To my great surprise, though, during the presentation embedding Wikidata suddenly worked, with no error.
            I only later figured out what happened:
            in the first practice run, I planned to first embed &lt;code&gt;https://&lt;strong&gt;www&lt;/strong&gt;.wikidata.org/wiki/Special:MobileDiff/&lt;var&gt;id&lt;/var&gt;&lt;/code&gt;,
            and then briefly mention how the mobile diff page on the main domain still has some clutter on it,
            and that we need to use the mobile domain instead, embedding &lt;code&gt;https://&lt;strong&gt;m&lt;/strong&gt;.wikidata.org/wiki/Special:MobileDiff/&lt;var&gt;id&lt;/var&gt;&lt;/code&gt;.
            As I then ran into the &lt;code&gt;X-Frame-Options&lt;/code&gt; header, I never got as far as the &lt;code&gt;m.wikidata.org&lt;/code&gt; domain.
            However, during the presentation, I skipped the &lt;code&gt;www.wikidata.org&lt;/code&gt; step and went straight to &lt;code&gt;m.wikidata.org&lt;/code&gt;,
            and since I‚Äôm not logged in there,
            there‚Äôs no ‚Äúmark as patrolled‚Äù link and MediaWiki lets me embed this page.
          &lt;/p&gt;
&lt;p&gt;
            Of course, I can‚Äôt rely on the fact that all tool users would never be logged in on &lt;code&gt;m.wikidata.org&lt;/code&gt;
            (this tool is, in fact, meant to be especially useful on mobile),
            so I‚Äôll still have to work around this somehow;
            however, in the meantime, I also learned that the &lt;a href="https://labels.wmflabs.org/"&gt;Wiki Labels tool&lt;/a&gt;
            (&lt;a href="https://github.com/wikimedia/wikilabels"&gt;source code&lt;/a&gt;)
            also includes pretty diffs in its output, without embedding anything,
            so I‚Äôll look into how that is implemented instead of resurrecting my ugly hack.
            (Fortunately, Wiki Labels is also a Flask app and published under a permissive source code license,
            so it should be possible to borrow the relevant code from it.)
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            When I first started adding buttons to the diff page,
            I discovered that clicking the ‚Äúskip‚Äù button
            unexpectedly sent a POST request to &lt;code&gt;/diff/skip&lt;/code&gt; instead of &lt;code&gt;/diff/&lt;var&gt;id&lt;/var&gt;/skip&lt;/code&gt;.
            I eventually figured out that this was
            because had written the ‚Äúdiff‚Äù route as &lt;code&gt;/diff/&lt;var&gt;id&lt;/var&gt;&lt;/code&gt; instead of &lt;code&gt;/diff/&lt;var&gt;id&lt;/var&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/code&gt;;
            without the trailing slash, the relative URL in &lt;code&gt;formaction="skip"&lt;/code&gt; replaced the last URL component instead of appending to it.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            The cookiecutter-toolforge template includes some sample code for protection against
            &lt;abbr title="cross-site request forgery"&gt;&lt;a href="https://www.wikidata.org/wiki/Special:GoToLinkedPage/enwiki/Q15401472"&gt;CSRF&lt;/a&gt;&lt;/abbr&gt; attacks,
            which I had recently strengthened after discovering that the original version was not completely effective.
            However, I hadn‚Äôt tested this strengthened version properly,
            and as a result all POSTs were rejected as invalid until I fixed it.
          &lt;/p&gt;
&lt;p&gt;
            Specifically, the CSRF protection included the following code (abbreviated):
          &lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;def full_url(endpoint, **kwargs):
    schema=flask.request.headers.get('X-Forwarded-Proto', 'http')
    return flask.url_for(endpoint, _external=True, _schema=schema, **kwargs)

def submitted_request_valid():
    # ...
    if not flask.request.referrer.startswith(full_url('index')):
        return False
    return True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
            This was intended to check that the referrer started with &lt;code&gt;https://tools.wmflabs.org/&lt;var&gt;tool-name&lt;/var&gt;/&lt;/code&gt;;
            the HTTP/HTTPS tweaking in &lt;code&gt;full_url()&lt;/code&gt; is necessary because Flask on Toolforge sits behind a proxy,
            and so it doesn‚Äôt know that absolute URLs to it should actually use HTTPS, not HTTP.
          &lt;/p&gt;
&lt;p&gt;
            However, the parameter to communicate this to &lt;code&gt;flask.url_for()&lt;/code&gt; is called &lt;code&gt;_schem&lt;strong&gt;e&lt;/strong&gt;&lt;/code&gt;,
            not &lt;code&gt;_schem&lt;strong&gt;a&lt;/strong&gt;&lt;/code&gt;.
            Since &lt;code&gt;_schema&lt;/code&gt; is not a recognized paramater for &lt;code&gt;flask.url_for()&lt;/code&gt; nor for &lt;code&gt;index()&lt;/code&gt;,
            it was appended to the URL as a query parameter,
            resulting in &lt;code&gt;submitted_request_valid()&lt;/code&gt; rejecting all requests
            because their referrers would not begin with &lt;code&gt;http://tools.wmflabs.org/&lt;var&gt;tool-name&lt;/var&gt;/?_schema=https&lt;/code&gt;.
            To make POSTs work, I had to &lt;a href="https://github.com/lucaswerkmeister/cookiecutter-toolforge/commit/6500426f479074a8426c665cdd176da0d721eb07"&gt;fix the &lt;code&gt;full_url()&lt;/code&gt; function&lt;/a&gt; in the template.
            (I hope no one created a new tool between the bug being introduced and fixed in the template,
            otherwise that tool would have to be fixed as well.)
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            When trying to make the API request to mark an edit as patrolled,
            I originally tried to use a regular MediaWiki API CSRF token as the &lt;code&gt;token&lt;/code&gt; parameter for &lt;code&gt;action='patrol'&lt;/code&gt;.
            However, that action requires a &lt;code&gt;patrol&lt;/code&gt;-type token.
            (Likewike, there is a dedicated token type for rollback.)
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            When I started adding the handler for the ‚Äúrollback‚Äù button,
            I envisioned it as rolling back the specified revision,
            just like the ‚Äúpatrol‚Äù handler.
            But that‚Äôs just not how rollback works:
            you don‚Äôt rollback a revision, you rollback all edits by a user on a page.
            So I had to write some more code to query for the page ID and user name of that revision,
            and then submit that to the rollback API.
            If the request failed ‚Äì for example, because someone else had edited the page after our user ‚Äì
            I was going to cop out and tell the user to please resolve the situation manually.
          &lt;/p&gt;
&lt;p&gt;
            However, it turned out that the MediaWiki API would not let me rollback edits,
            instead throwing a ‚Äúpermission denied‚Äù error:
          &lt;/p&gt;
&lt;blockquote&gt;
            mwapi.errors.APIError: permissiondenied: The action you have requested is limited to users in one of the groups: *, [[Wikidata:Users|Users]].
          &lt;/blockquote&gt;
&lt;p&gt;
            This greatly confused me at the time:
            my OAuth consumer had the ‚Äúrollback‚Äù grant, I was a rollbacker,
            and neither ‚Äú*‚Äù (any?) nor ‚Äúusers‚Äù are generally allowed to rollback edits
            (that‚Äôs restricted to rollbackers and even more privileged groups).
            I &lt;a href="https://discourse-mediawiki.wmflabs.org/t/permissiondenied-on-rollback-api/1005"&gt;asked for help on the Wikimedia Developer Support forum&lt;/a&gt;,
            but we were unable to figure out a solution or workaround before the presentation.
            Since rollback support wasn‚Äôt critical to me
            (depending on the time of day, it can take a bit to find edits that should be rolled back anyways, to test the feature),
            I took this as a ready-made excuse to just not implement rollback support during the presentation
            (not even the version that would throw the MediaWiki error),
            which gave me about five extra minutes of time.
            It turned out I didn‚Äôt need that extra time, but I wasn‚Äôt sure about that until the presentation was done.
          &lt;/p&gt;
&lt;p&gt;
            Afterwards, Gerg≈ë Tisza figured out what was wrong:
            rollback requires both edit and rollback rights, and I didn‚Äôt request edit rights for my consumer.
            This is now being discussed in &lt;a href="https://phabricator.wikimedia.org/T212851"&gt;T212851&lt;/a&gt;;
            for the time being, I haven‚Äôt implemented rollback support in the tool yet.
          &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;During the presentation&lt;/h2&gt;
&lt;p&gt;
        Despite my practice, some things went wrong during the presentation as well.
        You can watch those in the recording, of course, but I might as well list them here, too:
      &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
            When I started to write the tool,
            the Toolforge API reported that the ‚Äúspeedpatrolling‚Äù tool name was not available for a new tool.
            I think this must have been a temporary hiccup,
            since no such tool existed at the time,
            the same error was also reported for other tool names,
            and I was later able to create the tool under that name without a problem.
            However, to proceed during the presentation,
            I eventually had to disable the hook in the cookiecutter-toolforge template
            which usually checks if a name is available before proceeding with the template,
            by moving its file in my local copy of the template.
          &lt;/p&gt;
&lt;p&gt;
            Unfortunately, this confusion also led me to call the tool ‚Äúspeed-patrolling‚Äù instead of ‚Äúspeedpatrolling‚Äù during the presentation,
            even though that name didn‚Äôt work either;
            after the presentation, I had to do some cleanup to create the ‚Äúspeedpatrolling‚Äù tool,
            update all references in the source code,
            and then finally &lt;a href="https://phabricator.wikimedia.org/T212968"&gt;requested that ‚Äúspeed-patrolling‚Äù be deleted&lt;/a&gt;.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            As mentioned &lt;a href="https://lucaswerkmeister.de/posts/2019/01/04/speedpatrolling/#embed"&gt;above&lt;/a&gt;,
            embedding the diff worked right away even though I didn‚Äôt expect it to.
          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
            Although this presentation and tool are private projects,
            and I worked on them using my private accounts,
            I did this on my work laptop,
            because it was easier to practice it there
            (and also, I guess, because my private laptop needs an adapter to emit HDMI).
            However, this meant that when I was SSHing into Toolforge,
            I was using my work account instead of my private account,
            so I couldn‚Äôt deploy the tool, to which only my private account had access.
            To fix this, I had to SSH into my home PC
            (I‚Äôm &lt;em&gt;very&lt;/em&gt; glad I left it running over the holidays
            &lt;small&gt;(and yes, my electricity plan is green, why do you ask)&lt;/small&gt;)
            so I could SSH from there into Toolforge, using my private account.
            (Note that this is not the same as tunneling my SSH traffic through that PC (&lt;code&gt;ssh -J host&lt;/code&gt;),
            in which case I would still authenticate against Toolforge using my work credentials.)
          &lt;/p&gt;
&lt;aside&gt;
            This means that in the recording, you can see which hostname I use to refer to my home PC.
            I‚Äôve been meaning to write a blog post about my machine names for a while now‚Ä¶
            &lt;del&gt;I‚Äôll do it eventually‚Ñ¢&lt;/del&gt;
&lt;ins&gt;&lt;a href="https://lucaswerkmeister.de/posts/2019/01/11/system-naming-scheme/"&gt;it‚Äôs online now&lt;/a&gt;&lt;/ins&gt;.
          &lt;/aside&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
        And there we go!
        I hope this makes me seem less like, I don‚Äôt know, some kind of wizard?
        It‚Äôs completely normal to run into problems while building a tool
        (or doing any kind of software development, I suppose) ‚Äì
        what matters is that you can find ways overcome those problems
        (including but not limited to solving them),
        and get help when you need it.
        Try it out, it‚Äôs a lot of fun!
      &lt;/p&gt;

&lt;/article&gt;</description><guid isPermaLink="true">https://lucaswerkmeister.de/posts/2019/01/04/speedpatrolling/</guid><pubDate>Fri, 04 Jan 2019 00:00:00 GMT</pubDate></item></channel></rss>
